"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldMask = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const runtime_6 = require("@protobuf-ts/runtime");
const runtime_7 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class FieldMask$Type extends runtime_7.MessageType {
    constructor() {
        super("google.protobuf.FieldMask", [
            { no: 1, name: "paths", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    /**
     * Encode `FieldMask` to JSON object.
     */
    internalJsonWrite(message, options) {
        return message.paths.map(p => {
            if (p.match(/_[0-9]?_/g) || p.match(/[A-Z]/g))
                throw new Error("Unable to encode FieldMask to JSON. lowerCamelCase of path name \"" + p + "\" is irreversible.");
            return (0, runtime_6.lowerCamelCase)(p);
        }).join(",");
    }
    /**
     * Decode `FieldMask` from JSON object.
     */
    internalJsonRead(json, options, target) {
        if (typeof json !== "string")
            throw new Error("Unable to parse FieldMask from JSON " + (0, runtime_5.typeofJsonValue)(json) + ". Expected string.");
        if (!target)
            target = this.create();
        if (json === "")
            return target;
        let camelToSnake = (str) => {
            if (str.includes("_"))
                throw new Error("Unable to parse FieldMask from JSON. Path names must be lowerCamelCase.");
            let sc = str.replace(/[A-Z]/g, letter => "_" + letter.toLowerCase());
            return (sc[0] === "_") ? sc.substring(1) : sc;
        };
        target.paths = json.split(",").map(camelToSnake);
        return target;
    }
    create(value) {
        const message = { paths: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string paths */ 1:
                    message.paths.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string paths = 1; */
        for (let i = 0; i < message.paths.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.paths[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FieldMask
 */
exports.FieldMask = new FieldMask$Type();
//# sourceMappingURL=field_mask.js.map