"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsServiceV2Client = void 0;
const logging_metrics_1 = require("./logging_metrics");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Service for configuring logs-based metrics.
 *
 * @generated from protobuf service google.logging.v2.MetricsServiceV2
 */
class MetricsServiceV2Client {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = logging_metrics_1.MetricsServiceV2.typeName;
        this.methods = logging_metrics_1.MetricsServiceV2.methods;
        this.options = logging_metrics_1.MetricsServiceV2.options;
    }
    /**
     * Lists logs-based metrics.
     *
     * @generated from protobuf rpc: ListLogMetrics(google.logging.v2.ListLogMetricsRequest) returns (google.logging.v2.ListLogMetricsResponse);
     */
    listLogMetrics(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a logs-based metric.
     *
     * @generated from protobuf rpc: GetLogMetric(google.logging.v2.GetLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    getLogMetric(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Creates a logs-based metric.
     *
     * @generated from protobuf rpc: CreateLogMetric(google.logging.v2.CreateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    createLogMetric(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Creates or updates a logs-based metric.
     *
     * @generated from protobuf rpc: UpdateLogMetric(google.logging.v2.UpdateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    updateLogMetric(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Deletes a logs-based metric.
     *
     * @generated from protobuf rpc: DeleteLogMetric(google.logging.v2.DeleteLogMetricRequest) returns (google.protobuf.Empty);
     */
    deleteLogMetric(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.MetricsServiceV2Client = MetricsServiceV2Client;
//# sourceMappingURL=logging_metrics.client.js.map