"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingServiceV2 = exports.TailLogEntriesResponse_SuppressionInfo = exports.TailLogEntriesResponse = exports.TailLogEntriesRequest = exports.ListLogsResponse = exports.ListLogsRequest = exports.ListMonitoredResourceDescriptorsResponse = exports.ListMonitoredResourceDescriptorsRequest = exports.ListLogEntriesResponse = exports.ListLogEntriesRequest = exports.WriteLogEntriesPartialErrors = exports.WriteLogEntriesResponse = exports.WriteLogEntriesRequest = exports.DeleteLogRequest = exports.TailLogEntriesResponse_SuppressionInfo_Reason = void 0;
// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/logging/v2/logging.proto" (package "google.logging.v2", syntax proto3)
// tslint:disable
//
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
const empty_1 = require("../../protobuf/empty");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const duration_1 = require("../../protobuf/duration");
const monitored_resource_1 = require("../../api/monitored_resource");
const status_1 = require("../../rpc/status");
const log_entry_1 = require("./log_entry");
const monitored_resource_2 = require("../../api/monitored_resource");
/**
 * An indicator of why entries were omitted.
 *
 * @generated from protobuf enum google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason
 */
var TailLogEntriesResponse_SuppressionInfo_Reason;
(function (TailLogEntriesResponse_SuppressionInfo_Reason) {
    /**
     * Unexpected default.
     *
     * @generated from protobuf enum value: REASON_UNSPECIFIED = 0;
     */
    TailLogEntriesResponse_SuppressionInfo_Reason[TailLogEntriesResponse_SuppressionInfo_Reason["REASON_UNSPECIFIED"] = 0] = "REASON_UNSPECIFIED";
    /**
     * Indicates suppression occurred due to relevant entries being
     * received in excess of rate limits. For quotas and limits, see
     * [Logging API quotas and
     * limits](https://cloud.google.com/logging/quotas#api-limits).
     *
     * @generated from protobuf enum value: RATE_LIMIT = 1;
     */
    TailLogEntriesResponse_SuppressionInfo_Reason[TailLogEntriesResponse_SuppressionInfo_Reason["RATE_LIMIT"] = 1] = "RATE_LIMIT";
    /**
     * Indicates suppression occurred due to the client not consuming
     * responses quickly enough.
     *
     * @generated from protobuf enum value: NOT_CONSUMED = 2;
     */
    TailLogEntriesResponse_SuppressionInfo_Reason[TailLogEntriesResponse_SuppressionInfo_Reason["NOT_CONSUMED"] = 2] = "NOT_CONSUMED";
})(TailLogEntriesResponse_SuppressionInfo_Reason = exports.TailLogEntriesResponse_SuppressionInfo_Reason || (exports.TailLogEntriesResponse_SuppressionInfo_Reason = {}));
// @generated message type with reflection information, may provide speed optimized methods
class DeleteLogRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.DeleteLogRequest", [
            { no: 1, name: "log_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { type: "logging.googleapis.com/Log" } } }
        ]);
    }
    create(value) {
        const message = { logName: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_name */ 1:
                    message.logName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string log_name = 1; */
        if (message.logName !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.logName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.DeleteLogRequest
 */
exports.DeleteLogRequest = new DeleteLogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.WriteLogEntriesRequest", [
            { no: 1, name: "log_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"], "google.api.resource_reference": { type: "logging.googleapis.com/Log" } } },
            { no: 2, name: "resource", kind: "message", T: () => monitored_resource_2.MonitoredResource, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "labels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ }, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 4, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => log_entry_1.LogEntry, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 5, name: "partial_success", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 6, name: "dry_run", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value) {
        const message = { logName: "", labels: {}, entries: [], partialSuccess: false, dryRun: false };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log_name */ 1:
                    message.logName = reader.string();
                    break;
                case /* google.api.MonitoredResource resource */ 2:
                    message.resource = monitored_resource_2.MonitoredResource.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* map<string, string> labels */ 3:
                    this.binaryReadMap3(message.labels, reader, options);
                    break;
                case /* repeated google.logging.v2.LogEntry entries */ 4:
                    message.entries.push(log_entry_1.LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool partial_success */ 5:
                    message.partialSuccess = reader.bool();
                    break;
                case /* bool dry_run */ 6:
                    message.dryRun = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.logging.v2.WriteLogEntriesRequest.labels");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string log_name = 1; */
        if (message.logName !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.logName);
        /* google.api.MonitoredResource resource = 2; */
        if (message.resource)
            monitored_resource_2.MonitoredResource.internalBinaryWrite(message.resource, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> labels = 3; */
        for (let k of Object.keys(message.labels))
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k).tag(2, runtime_1.WireType.LengthDelimited).string(message.labels[k]).join();
        /* repeated google.logging.v2.LogEntry entries = 4; */
        for (let i = 0; i < message.entries.length; i++)
            log_entry_1.LogEntry.internalBinaryWrite(message.entries[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* bool partial_success = 5; */
        if (message.partialSuccess !== false)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.partialSuccess);
        /* bool dry_run = 6; */
        if (message.dryRun !== false)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.dryRun);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesRequest
 */
exports.WriteLogEntriesRequest = new WriteLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.WriteLogEntriesResponse", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesResponse
 */
exports.WriteLogEntriesResponse = new WriteLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteLogEntriesPartialErrors$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.WriteLogEntriesPartialErrors", [
            { no: 1, name: "log_entry_errors", kind: "map", K: 5 /*ScalarType.INT32*/, V: { kind: "message", T: () => status_1.Status } }
        ]);
    }
    create(value) {
        const message = { logEntryErrors: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<int32, google.rpc.Status> log_entry_errors */ 1:
                    this.binaryReadMap1(message.logEntryErrors, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap1(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int32();
                    break;
                case 2:
                    val = status_1.Status.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.logging.v2.WriteLogEntriesPartialErrors.log_entry_errors");
            }
        }
        map[key ?? 0] = val ?? status_1.Status.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<int32, google.rpc.Status> log_entry_errors = 1; */
        for (let k of Object.keys(message.logEntryErrors)) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).int32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            status_1.Status.internalBinaryWrite(message.logEntryErrors[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.WriteLogEntriesPartialErrors
 */
exports.WriteLogEntriesPartialErrors = new WriteLogEntriesPartialErrors$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogEntriesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListLogEntriesRequest", [
            { no: 8, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "order_by", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 4, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 5, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value) {
        const message = { resourceNames: [], filter: "", orderBy: "", pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string resource_names */ 8:
                    message.resourceNames.push(reader.string());
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                case /* string order_by */ 3:
                    message.orderBy = reader.string();
                    break;
                case /* int32 page_size */ 4:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 5:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string resource_names = 8; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.resourceNames[i]);
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.filter);
        /* string order_by = 3; */
        if (message.orderBy !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.orderBy);
        /* int32 page_size = 4; */
        if (message.pageSize !== 0)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.pageSize);
        /* string page_token = 5; */
        if (message.pageToken !== "")
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogEntriesRequest
 */
exports.ListLogEntriesRequest = new ListLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogEntriesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListLogEntriesResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => log_entry_1.LogEntry },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { entries: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.logging.v2.LogEntry entries */ 1:
                    message.entries.push(log_entry_1.LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.logging.v2.LogEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            log_entry_1.LogEntry.internalBinaryWrite(message.entries[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogEntriesResponse
 */
exports.ListLogEntriesResponse = new ListLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMonitoredResourceDescriptorsRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListMonitoredResourceDescriptorsRequest", [
            { no: 1, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 2, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value) {
        const message = { pageSize: 0, pageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page_size */ 1:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 2:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 page_size = 1; */
        if (message.pageSize !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.pageSize);
        /* string page_token = 2; */
        if (message.pageToken !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListMonitoredResourceDescriptorsRequest
 */
exports.ListMonitoredResourceDescriptorsRequest = new ListMonitoredResourceDescriptorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMonitoredResourceDescriptorsResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListMonitoredResourceDescriptorsResponse", [
            { no: 1, name: "resource_descriptors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => monitored_resource_1.MonitoredResourceDescriptor },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { resourceDescriptors: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.MonitoredResourceDescriptor resource_descriptors */ 1:
                    message.resourceDescriptors.push(monitored_resource_1.MonitoredResourceDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.MonitoredResourceDescriptor resource_descriptors = 1; */
        for (let i = 0; i < message.resourceDescriptors.length; i++)
            monitored_resource_1.MonitoredResourceDescriptor.internalBinaryWrite(message.resourceDescriptors[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListMonitoredResourceDescriptorsResponse
 */
exports.ListMonitoredResourceDescriptorsResponse = new ListMonitoredResourceDescriptorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogsRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListLogsRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 8, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"], "google.api.resource_reference": { childType: "logging.googleapis.com/Log" } } }
        ]);
    }
    create(value) {
        const message = { parent: "", pageSize: 0, pageToken: "", resourceNames: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                case /* repeated string resource_names */ 8:
                    message.resourceNames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.pageToken);
        /* repeated string resource_names = 8; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.resourceNames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogsRequest
 */
exports.ListLogsRequest = new ListLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListLogsResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.ListLogsResponse", [
            { no: 3, name: "log_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { logNames: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string log_names */ 3:
                    message.logNames.push(reader.string());
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string log_names = 3; */
        for (let i = 0; i < message.logNames.length; i++)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.logNames[i]);
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.ListLogsResponse
 */
exports.ListLogsResponse = new ListLogsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.TailLogEntriesRequest", [
            { no: 1, name: "resource_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 2, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OPTIONAL"] } },
            { no: 3, name: "buffer_window", kind: "message", T: () => duration_1.Duration, options: { "google.api.field_behavior": ["OPTIONAL"] } }
        ]);
    }
    create(value) {
        const message = { resourceNames: [], filter: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string resource_names */ 1:
                    message.resourceNames.push(reader.string());
                    break;
                case /* string filter */ 2:
                    message.filter = reader.string();
                    break;
                case /* google.protobuf.Duration buffer_window */ 3:
                    message.bufferWindow = duration_1.Duration.internalBinaryRead(reader, reader.uint32(), options, message.bufferWindow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string resource_names = 1; */
        for (let i = 0; i < message.resourceNames.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.resourceNames[i]);
        /* string filter = 2; */
        if (message.filter !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.filter);
        /* google.protobuf.Duration buffer_window = 3; */
        if (message.bufferWindow)
            duration_1.Duration.internalBinaryWrite(message.bufferWindow, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesRequest
 */
exports.TailLogEntriesRequest = new TailLogEntriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.TailLogEntriesResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => log_entry_1.LogEntry },
            { no: 2, name: "suppression_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TailLogEntriesResponse_SuppressionInfo }
        ]);
    }
    create(value) {
        const message = { entries: [], suppressionInfo: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.logging.v2.LogEntry entries */ 1:
                    message.entries.push(log_entry_1.LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info */ 2:
                    message.suppressionInfo.push(exports.TailLogEntriesResponse_SuppressionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.logging.v2.LogEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            log_entry_1.LogEntry.internalBinaryWrite(message.entries[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.logging.v2.TailLogEntriesResponse.SuppressionInfo suppression_info = 2; */
        for (let i = 0; i < message.suppressionInfo.length; i++)
            exports.TailLogEntriesResponse_SuppressionInfo.internalBinaryWrite(message.suppressionInfo[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesResponse
 */
exports.TailLogEntriesResponse = new TailLogEntriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailLogEntriesResponse_SuppressionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("google.logging.v2.TailLogEntriesResponse.SuppressionInfo", [
            { no: 1, name: "reason", kind: "enum", T: () => ["google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason", TailLogEntriesResponse_SuppressionInfo_Reason] },
            { no: 2, name: "suppressed_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { reason: 0, suppressedCount: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* int32 suppressed_count */ 2:
                    message.suppressedCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.logging.v2.TailLogEntriesResponse.SuppressionInfo.Reason reason = 1; */
        if (message.reason !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.reason);
        /* int32 suppressed_count = 2; */
        if (message.suppressedCount !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.suppressedCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.logging.v2.TailLogEntriesResponse.SuppressionInfo
 */
exports.TailLogEntriesResponse_SuppressionInfo = new TailLogEntriesResponse_SuppressionInfo$Type();
/**
 * @generated ServiceType for protobuf service google.logging.v2.LoggingServiceV2
 */
exports.LoggingServiceV2 = new runtime_rpc_1.ServiceType("google.logging.v2.LoggingServiceV2", [
    { name: "DeleteLog", options: { "google.api.http": { delete: "/v2/{log_name=projects/*/logs/*}", additionalBindings: [{ delete: "/v2/{log_name=*/*/logs/*}" }, { delete: "/v2/{log_name=organizations/*/logs/*}" }, { delete: "/v2/{log_name=folders/*/logs/*}" }, { delete: "/v2/{log_name=billingAccounts/*/logs/*}" }] }, "google.api.method_signature": ["log_name"] }, I: exports.DeleteLogRequest, O: empty_1.Empty },
    { name: "WriteLogEntries", options: { "google.api.http": { post: "/v2/entries:write", body: "*" }, "google.api.method_signature": ["log_name,resource,labels,entries"] }, I: exports.WriteLogEntriesRequest, O: exports.WriteLogEntriesResponse },
    { name: "ListLogEntries", options: { "google.api.http": { post: "/v2/entries:list", body: "*" }, "google.api.method_signature": ["resource_names,filter,order_by"] }, I: exports.ListLogEntriesRequest, O: exports.ListLogEntriesResponse },
    { name: "ListMonitoredResourceDescriptors", options: { "google.api.http": { get: "/v2/monitoredResourceDescriptors" } }, I: exports.ListMonitoredResourceDescriptorsRequest, O: exports.ListMonitoredResourceDescriptorsResponse },
    { name: "ListLogs", options: { "google.api.http": { get: "/v2/{parent=*/*}/logs", additionalBindings: [{ get: "/v2/{parent=projects/*}/logs" }, { get: "/v2/{parent=organizations/*}/logs" }, { get: "/v2/{parent=folders/*}/logs" }, { get: "/v2/{parent=billingAccounts/*}/logs" }] }, "google.api.method_signature": ["parent"] }, I: exports.ListLogsRequest, O: exports.ListLogsResponse },
    { name: "TailLogEntries", serverStreaming: true, clientStreaming: true, options: { "google.api.http": { post: "/v2/entries:tail", body: "*" } }, I: exports.TailLogEntriesRequest, O: exports.TailLogEntriesResponse }
], { "google.api.default_host": "logging.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only,https://www.googleapis.com/auth/logging.admin,https://www.googleapis.com/auth/logging.read,https://www.googleapis.com/auth/logging.write" });
//# sourceMappingURL=logging.js.map