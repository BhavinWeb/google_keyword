import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../protobuf/empty";
import type { DeleteLogMetricRequest } from "./logging_metrics";
import type { UpdateLogMetricRequest } from "./logging_metrics";
import type { CreateLogMetricRequest } from "./logging_metrics";
import type { LogMetric } from "./logging_metrics";
import type { GetLogMetricRequest } from "./logging_metrics";
import type { ListLogMetricsResponse } from "./logging_metrics";
import type { ListLogMetricsRequest } from "./logging_metrics";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service for configuring logs-based metrics.
 *
 * @generated from protobuf service google.logging.v2.MetricsServiceV2
 */
export interface IMetricsServiceV2Client {
    /**
     * Lists logs-based metrics.
     *
     * @generated from protobuf rpc: ListLogMetrics(google.logging.v2.ListLogMetricsRequest) returns (google.logging.v2.ListLogMetricsResponse);
     */
    listLogMetrics(input: ListLogMetricsRequest, options?: RpcOptions): UnaryCall<ListLogMetricsRequest, ListLogMetricsResponse>;
    /**
     * Gets a logs-based metric.
     *
     * @generated from protobuf rpc: GetLogMetric(google.logging.v2.GetLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    getLogMetric(input: GetLogMetricRequest, options?: RpcOptions): UnaryCall<GetLogMetricRequest, LogMetric>;
    /**
     * Creates a logs-based metric.
     *
     * @generated from protobuf rpc: CreateLogMetric(google.logging.v2.CreateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    createLogMetric(input: CreateLogMetricRequest, options?: RpcOptions): UnaryCall<CreateLogMetricRequest, LogMetric>;
    /**
     * Creates or updates a logs-based metric.
     *
     * @generated from protobuf rpc: UpdateLogMetric(google.logging.v2.UpdateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    updateLogMetric(input: UpdateLogMetricRequest, options?: RpcOptions): UnaryCall<UpdateLogMetricRequest, LogMetric>;
    /**
     * Deletes a logs-based metric.
     *
     * @generated from protobuf rpc: DeleteLogMetric(google.logging.v2.DeleteLogMetricRequest) returns (google.protobuf.Empty);
     */
    deleteLogMetric(input: DeleteLogMetricRequest, options?: RpcOptions): UnaryCall<DeleteLogMetricRequest, Empty>;
}
/**
 * Service for configuring logs-based metrics.
 *
 * @generated from protobuf service google.logging.v2.MetricsServiceV2
 */
export declare class MetricsServiceV2Client implements IMetricsServiceV2Client, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * Lists logs-based metrics.
     *
     * @generated from protobuf rpc: ListLogMetrics(google.logging.v2.ListLogMetricsRequest) returns (google.logging.v2.ListLogMetricsResponse);
     */
    listLogMetrics(input: ListLogMetricsRequest, options?: RpcOptions): UnaryCall<ListLogMetricsRequest, ListLogMetricsResponse>;
    /**
     * Gets a logs-based metric.
     *
     * @generated from protobuf rpc: GetLogMetric(google.logging.v2.GetLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    getLogMetric(input: GetLogMetricRequest, options?: RpcOptions): UnaryCall<GetLogMetricRequest, LogMetric>;
    /**
     * Creates a logs-based metric.
     *
     * @generated from protobuf rpc: CreateLogMetric(google.logging.v2.CreateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    createLogMetric(input: CreateLogMetricRequest, options?: RpcOptions): UnaryCall<CreateLogMetricRequest, LogMetric>;
    /**
     * Creates or updates a logs-based metric.
     *
     * @generated from protobuf rpc: UpdateLogMetric(google.logging.v2.UpdateLogMetricRequest) returns (google.logging.v2.LogMetric);
     */
    updateLogMetric(input: UpdateLogMetricRequest, options?: RpcOptions): UnaryCall<UpdateLogMetricRequest, LogMetric>;
    /**
     * Deletes a logs-based metric.
     *
     * @generated from protobuf rpc: DeleteLogMetric(google.logging.v2.DeleteLogMetricRequest) returns (google.protobuf.Empty);
     */
    deleteLogMetric(input: DeleteLogMetricRequest, options?: RpcOptions): UnaryCall<DeleteLogMetricRequest, Empty>;
}
