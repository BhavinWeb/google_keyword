import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Selects and configures the service controller used by the service.  The
 * service controller handles features like abuse, quota, billing, logging,
 * monitoring, etc.
 *
 * @generated from protobuf message google.api.Control
 */
export interface Control {
    /**
     * The service control environment to use. If empty, no control plane
     * feature (like quota and billing) will be enabled.
     *
     * @generated from protobuf field: string environment = 1;
     */
    environment: string;
}
declare class Control$Type extends MessageType<Control> {
    constructor();
    create(value?: PartialMessage<Control>): Control;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Control): Control;
    internalBinaryWrite(message: Control, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Control
 */
export declare const Control: Control$Type;
export {};
