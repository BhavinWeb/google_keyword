import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Logging configuration of the service.
 *
 * The following example shows how to configure logs to be sent to the
 * producer and consumer projects. In the example, the `activity_history`
 * log is sent to both the producer and consumer projects, whereas the
 * `purchase_history` log is only sent to the producer project.
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/branch
 *       labels:
 *       - key: /city
 *         description: The city where the library branch is located in.
 *       - key: /name
 *         description: The name of the branch.
 *     logs:
 *     - name: activity_history
 *       labels:
 *       - key: /customer_id
 *     - name: purchase_history
 *     logging:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         logs:
 *         - activity_history
 *         - purchase_history
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         logs:
 *         - activity_history
 *
 * @generated from protobuf message google.api.Logging
 */
export interface Logging {
    /**
     * Logging configurations for sending logs to the producer project.
     * There can be multiple producer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one producer destination.
     *
     * @generated from protobuf field: repeated google.api.Logging.LoggingDestination producer_destinations = 1;
     */
    producerDestinations: Logging_LoggingDestination[];
    /**
     * Logging configurations for sending logs to the consumer project.
     * There can be multiple consumer destinations, each one must have a
     * different monitored resource type. A log can be used in at most
     * one consumer destination.
     *
     * @generated from protobuf field: repeated google.api.Logging.LoggingDestination consumer_destinations = 2;
     */
    consumerDestinations: Logging_LoggingDestination[];
}
/**
 * Configuration of a specific logging destination (the producer project
 * or the consumer project).
 *
 * @generated from protobuf message google.api.Logging.LoggingDestination
 */
export interface Logging_LoggingDestination {
    /**
     * The monitored resource type. The type must be defined in the
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     *
     * @generated from protobuf field: string monitored_resource = 3;
     */
    monitoredResource: string;
    /**
     * Names of the logs to be sent to this destination. Each name must
     * be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
     * not a domain scoped name, it will be automatically prefixed with
     * the service name followed by "/".
     *
     * @generated from protobuf field: repeated string logs = 1;
     */
    logs: string[];
}
declare class Logging$Type extends MessageType<Logging> {
    constructor();
    create(value?: PartialMessage<Logging>): Logging;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Logging): Logging;
    internalBinaryWrite(message: Logging, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Logging
 */
export declare const Logging: Logging$Type;
declare class Logging_LoggingDestination$Type extends MessageType<Logging_LoggingDestination> {
    constructor();
    create(value?: PartialMessage<Logging_LoggingDestination>): Logging_LoggingDestination;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Logging_LoggingDestination): Logging_LoggingDestination;
    internalBinaryWrite(message: Logging_LoggingDestination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Logging.LoggingDestination
 */
export declare const Logging_LoggingDestination: Logging_LoggingDestination$Type;
export {};
