import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LabelDescriptor } from "./label";
/**
 * A description of a log type. Example in YAML format:
 *
 *     - name: library.googleapis.com/activity_history
 *       description: The history of borrowing and returning library items.
 *       display_name: Activity
 *       labels:
 *       - key: /customer_id
 *         description: Identifier of a library customer
 *
 * @generated from protobuf message google.api.LogDescriptor
 */
export interface LogDescriptor {
    /**
     * The name of the log. It must be less than 512 characters long and can
     * include the following characters: upper- and lower-case alphanumeric
     * characters [A-Za-z0-9], and punctuation characters including
     * slash, underscore, hyphen, period [/_-.].
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * The set of labels that are available to describe a specific log entry.
     * Runtime requests that contain labels not specified here are
     * considered invalid.
     *
     * @generated from protobuf field: repeated google.api.LabelDescriptor labels = 2;
     */
    labels: LabelDescriptor[];
    /**
     * A human-readable description of this log. This information appears in
     * the documentation and can contain details.
     *
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * The human-readable name for this log. This information appears on
     * the user interface and should be concise.
     *
     * @generated from protobuf field: string display_name = 4;
     */
    displayName: string;
}
declare class LogDescriptor$Type extends MessageType<LogDescriptor> {
    constructor();
    create(value?: PartialMessage<LogDescriptor>): LogDescriptor;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogDescriptor): LogDescriptor;
    internalBinaryWrite(message: LogDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.LogDescriptor
 */
export declare const LogDescriptor: LogDescriptor$Type;
export {};
