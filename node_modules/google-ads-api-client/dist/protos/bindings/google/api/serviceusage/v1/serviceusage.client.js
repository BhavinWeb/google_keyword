"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceUsageClient = void 0;
const serviceusage_1 = require("./serviceusage");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Enables services that service consumers want to use on Google Cloud Platform,
 * lists the available or enabled services, or disables services that service
 * consumers no longer use.
 *
 * See [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
 *
 * @generated from protobuf service google.api.serviceusage.v1.ServiceUsage
 */
class ServiceUsageClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = serviceusage_1.ServiceUsage.typeName;
        this.methods = serviceusage_1.ServiceUsage.methods;
        this.options = serviceusage_1.ServiceUsage.options;
    }
    /**
     * Enable a service so that it can be used with a project.
     *
     * @generated from protobuf rpc: EnableService(google.api.serviceusage.v1.EnableServiceRequest) returns (google.longrunning.Operation);
     */
    enableService(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Disable a service so that it can no longer be used with a project.
     * This prevents unintended usage that may cause unexpected billing
     * charges or security leaks.
     *
     * It is not valid to call the disable method on a service that is not
     * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
     * the target service is not currently enabled.
     *
     * @generated from protobuf rpc: DisableService(google.api.serviceusage.v1.DisableServiceRequest) returns (google.longrunning.Operation);
     */
    disableService(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the service configuration and enabled state for a given service.
     *
     * @generated from protobuf rpc: GetService(google.api.serviceusage.v1.GetServiceRequest) returns (google.api.serviceusage.v1.Service);
     */
    getService(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * List all services available to the specified project, and the current
     * state of those services with respect to the project. The list includes
     * all public services, all services for which the calling user has the
     * `servicemanagement.services.bind` permission, and all services that have
     * already been enabled on the project. The list can be filtered to
     * only include services in a specific state, for example to only include
     * services enabled on the project.
     *
     * WARNING: If you need to query enabled services frequently or across
     * an organization, you should use
     * [Cloud Asset Inventory
     * API](https://cloud.google.com/asset-inventory/docs/apis), which provides
     * higher throughput and richer filtering capability.
     *
     * @generated from protobuf rpc: ListServices(google.api.serviceusage.v1.ListServicesRequest) returns (google.api.serviceusage.v1.ListServicesResponse);
     */
    listServices(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Enable multiple services on a project. The operation is atomic: if enabling
     * any service fails, then the entire batch fails, and no state changes occur.
     * To enable a single service, use the `EnableService` method instead.
     *
     * @generated from protobuf rpc: BatchEnableServices(google.api.serviceusage.v1.BatchEnableServicesRequest) returns (google.longrunning.Operation);
     */
    batchEnableServices(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the service configurations and enabled states for a given list of
     * services.
     *
     * @generated from protobuf rpc: BatchGetServices(google.api.serviceusage.v1.BatchGetServicesRequest) returns (google.api.serviceusage.v1.BatchGetServicesResponse);
     */
    batchGetServices(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ServiceUsageClient = ServiceUsageClient;
//# sourceMappingURL=serviceusage.client.js.map