"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceUsage = exports.BatchGetServicesResponse = exports.BatchGetServicesRequest = exports.BatchEnableServicesResponse_EnableFailure = exports.BatchEnableServicesResponse = exports.BatchEnableServicesRequest = exports.ListServicesResponse = exports.ListServicesRequest = exports.GetServiceRequest = exports.DisableServiceResponse = exports.DisableServiceRequest = exports.EnableServiceResponse = exports.EnableServiceRequest = exports.DisableServiceRequest_CheckIfServiceHasUsage = void 0;
// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "google/api/serviceusage/v1/serviceusage.proto" (package "google.api.serviceusage.v1", syntax proto3)
// tslint:disable
//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
const operations_1 = require("../../../longrunning/operations");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const resources_1 = require("./resources");
/**
 * Enum to determine if service usage should be checked when disabling a
 * service.
 *
 * @generated from protobuf enum google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage
 */
var DisableServiceRequest_CheckIfServiceHasUsage;
(function (DisableServiceRequest_CheckIfServiceHasUsage) {
    /**
     * When unset, the default behavior is used, which is SKIP.
     *
     * @generated from protobuf enum value: CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED = 0;
     */
    DisableServiceRequest_CheckIfServiceHasUsage[DisableServiceRequest_CheckIfServiceHasUsage["CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED"] = 0] = "CHECK_IF_SERVICE_HAS_USAGE_UNSPECIFIED";
    /**
     * If set, skip checking service usage when disabling a service.
     *
     * @generated from protobuf enum value: SKIP = 1;
     */
    DisableServiceRequest_CheckIfServiceHasUsage[DisableServiceRequest_CheckIfServiceHasUsage["SKIP"] = 1] = "SKIP";
    /**
     * If set, service usage is checked when disabling the service. If a
     * service, or its dependents, has usage in the last 30 days, the request
     * returns a FAILED_PRECONDITION error.
     *
     * @generated from protobuf enum value: CHECK = 2;
     */
    DisableServiceRequest_CheckIfServiceHasUsage[DisableServiceRequest_CheckIfServiceHasUsage["CHECK"] = 2] = "CHECK";
})(DisableServiceRequest_CheckIfServiceHasUsage = exports.DisableServiceRequest_CheckIfServiceHasUsage || (exports.DisableServiceRequest_CheckIfServiceHasUsage = {}));
// @generated message type with reflection information, may provide speed optimized methods
class EnableServiceRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.EnableServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.EnableServiceRequest
 */
exports.EnableServiceRequest = new EnableServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnableServiceResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.EnableServiceResponse", [
            { no: 1, name: "service", kind: "message", T: () => resources_1.Service }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.serviceusage.v1.Service service */ 1:
                    message.service = resources_1.Service.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.api.serviceusage.v1.Service service = 1; */
        if (message.service)
            resources_1.Service.internalBinaryWrite(message.service, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.EnableServiceResponse
 */
exports.EnableServiceResponse = new EnableServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableServiceRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.DisableServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disable_dependent_services", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "check_if_service_has_usage", kind: "enum", T: () => ["google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage", DisableServiceRequest_CheckIfServiceHasUsage] }
        ]);
    }
    create(value) {
        const message = { name: "", disableDependentServices: false, checkIfServiceHasUsage: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool disable_dependent_services */ 2:
                    message.disableDependentServices = reader.bool();
                    break;
                case /* google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage */ 3:
                    message.checkIfServiceHasUsage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.name);
        /* bool disable_dependent_services = 2; */
        if (message.disableDependentServices !== false)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.disableDependentServices);
        /* google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage check_if_service_has_usage = 3; */
        if (message.checkIfServiceHasUsage !== 0)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.checkIfServiceHasUsage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.DisableServiceRequest
 */
exports.DisableServiceRequest = new DisableServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableServiceResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.DisableServiceResponse", [
            { no: 1, name: "service", kind: "message", T: () => resources_1.Service }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.serviceusage.v1.Service service */ 1:
                    message.service = resources_1.Service.internalBinaryRead(reader, reader.uint32(), options, message.service);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.api.serviceusage.v1.Service service = 1; */
        if (message.service)
            resources_1.Service.internalBinaryWrite(message.service, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.DisableServiceResponse
 */
exports.DisableServiceResponse = new DisableServiceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServiceRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.GetServiceRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.GetServiceRequest
 */
exports.GetServiceRequest = new GetServiceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.ListServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "filter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { parent: "", pageSize: 0, pageToken: "", filter: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* int32 page_size */ 2:
                    message.pageSize = reader.int32();
                    break;
                case /* string page_token */ 3:
                    message.pageToken = reader.string();
                    break;
                case /* string filter */ 4:
                    message.filter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.parent);
        /* int32 page_size = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.pageSize);
        /* string page_token = 3; */
        if (message.pageToken !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.pageToken);
        /* string filter = 4; */
        if (message.filter !== "")
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.filter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.ListServicesRequest
 */
exports.ListServicesRequest = new ListServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListServicesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.ListServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => resources_1.Service },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { services: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(resources_1.Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            resources_1.Service.internalBinaryWrite(message.services[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.ListServicesResponse
 */
exports.ListServicesResponse = new ListServicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "service_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { parent: "", serviceIds: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* repeated string service_ids */ 2:
                    message.serviceIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.parent);
        /* repeated string service_ids = 2; */
        for (let i = 0; i < message.serviceIds.length; i++)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.serviceIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesRequest
 */
exports.BatchEnableServicesRequest = new BatchEnableServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => resources_1.Service },
            { no: 2, name: "failures", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BatchEnableServicesResponse_EnableFailure }
        ]);
    }
    create(value) {
        const message = { services: [], failures: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(resources_1.Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures */ 2:
                    message.failures.push(exports.BatchEnableServicesResponse_EnableFailure.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            resources_1.Service.internalBinaryWrite(message.services[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure failures = 2; */
        for (let i = 0; i < message.failures.length; i++)
            exports.BatchEnableServicesResponse_EnableFailure.internalBinaryWrite(message.failures[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse
 */
exports.BatchEnableServicesResponse = new BatchEnableServicesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchEnableServicesResponse_EnableFailure$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure", [
            { no: 1, name: "service_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { serviceId: "", errorMessage: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_id */ 1:
                    message.serviceId = reader.string();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string service_id = 1; */
        if (message.serviceId !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.serviceId);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchEnableServicesResponse.EnableFailure
 */
exports.BatchEnableServicesResponse_EnableFailure = new BatchEnableServicesResponse_EnableFailure$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchGetServicesRequest$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.BatchGetServicesRequest", [
            { no: 1, name: "parent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { parent: "", names: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string parent */ 1:
                    message.parent = reader.string();
                    break;
                case /* repeated string names */ 2:
                    message.names.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string parent = 1; */
        if (message.parent !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.parent);
        /* repeated string names = 2; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.names[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchGetServicesRequest
 */
exports.BatchGetServicesRequest = new BatchGetServicesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchGetServicesResponse$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.serviceusage.v1.BatchGetServicesResponse", [
            { no: 1, name: "services", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => resources_1.Service }
        ]);
    }
    create(value) {
        const message = { services: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.serviceusage.v1.Service services */ 1:
                    message.services.push(resources_1.Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.serviceusage.v1.Service services = 1; */
        for (let i = 0; i < message.services.length; i++)
            resources_1.Service.internalBinaryWrite(message.services[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.serviceusage.v1.BatchGetServicesResponse
 */
exports.BatchGetServicesResponse = new BatchGetServicesResponse$Type();
/**
 * @generated ServiceType for protobuf service google.api.serviceusage.v1.ServiceUsage
 */
exports.ServiceUsage = new runtime_rpc_1.ServiceType("google.api.serviceusage.v1.ServiceUsage", [
    { name: "EnableService", options: { "google.api.http": { post: "/v1/{name=*/*/services/*}:enable", body: "*" }, "google.longrunning.operation_info": { responseType: "EnableServiceResponse", metadataType: "OperationMetadata" } }, I: exports.EnableServiceRequest, O: operations_1.Operation },
    { name: "DisableService", options: { "google.api.http": { post: "/v1/{name=*/*/services/*}:disable", body: "*" }, "google.longrunning.operation_info": { responseType: "DisableServiceResponse", metadataType: "OperationMetadata" } }, I: exports.DisableServiceRequest, O: operations_1.Operation },
    { name: "GetService", options: { "google.api.http": { get: "/v1/{name=*/*/services/*}" } }, I: exports.GetServiceRequest, O: resources_1.Service },
    { name: "ListServices", options: { "google.api.http": { get: "/v1/{parent=*/*}/services" } }, I: exports.ListServicesRequest, O: exports.ListServicesResponse },
    { name: "BatchEnableServices", options: { "google.api.http": { post: "/v1/{parent=*/*}/services:batchEnable", body: "*" }, "google.longrunning.operation_info": { responseType: "BatchEnableServicesResponse", metadataType: "OperationMetadata" } }, I: exports.BatchEnableServicesRequest, O: operations_1.Operation },
    { name: "BatchGetServices", options: { "google.api.http": { get: "/v1/{parent=*/*}/services:batchGet" } }, I: exports.BatchGetServicesRequest, O: exports.BatchGetServicesResponse }
], { "google.api.default_host": "serviceusage.googleapis.com", "google.api.oauth_scopes": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platform.read-only,https://www.googleapis.com/auth/service.management" });
//# sourceMappingURL=serviceusage.js.map