import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Configuration controlling usage of a service.
 *
 * @generated from protobuf message google.api.Usage
 */
export interface Usage {
    /**
     * Requirements that must be satisfied before a consumer project can use the
     * service. Each requirement is of the form <service.name>/<requirement-id>;
     * for example 'serviceusage.googleapis.com/billing-enabled'.
     *
     * For Google APIs, a Terms of Service requirement must be included here.
     * Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud".
     * Other Google APIs should include
     * "serviceusage.googleapis.com/tos/universal". Additional ToS can be
     * included based on the business needs.
     *
     * @generated from protobuf field: repeated string requirements = 1;
     */
    requirements: string[];
    /**
     * A list of usage rules that apply to individual API methods.
     *
     * **NOTE:** All service configuration rules follow "last one wins" order.
     *
     * @generated from protobuf field: repeated google.api.UsageRule rules = 6;
     */
    rules: UsageRule[];
    /**
     * The full resource name of a channel used for sending notifications to the
     * service producer.
     *
     * Google Service Management currently only supports
     * [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification
     * channel. To use Google Cloud Pub/Sub as the channel, this must be the name
     * of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format
     * documented in https://cloud.google.com/pubsub/docs/overview.
     *
     * @generated from protobuf field: string producer_notification_channel = 7;
     */
    producerNotificationChannel: string;
}
/**
 * Usage configuration rules for the service.
 *
 * NOTE: Under development.
 *
 *
 * Use this rule to configure unregistered calls for the service. Unregistered
 * calls are calls that do not contain consumer project identity.
 * (Example: calls that do not contain an API key).
 * By default, API methods do not allow unregistered calls, and each method call
 * must be identified by a consumer project identity. Use this rule to
 * allow/disallow unregistered calls.
 *
 * Example of an API that wants to allow unregistered calls for entire service.
 *
 *     usage:
 *       rules:
 *       - selector: "*"
 *         allow_unregistered_calls: true
 *
 * Example of a method that wants to allow unregistered calls.
 *
 *     usage:
 *       rules:
 *       - selector: "google.example.library.v1.LibraryService.CreateBook"
 *         allow_unregistered_calls: true
 *
 * @generated from protobuf message google.api.UsageRule
 */
export interface UsageRule {
    /**
     * Selects the methods to which this rule applies. Use '*' to indicate all
     * methods in all APIs.
     *
     * Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
     *
     * @generated from protobuf field: string selector = 1;
     */
    selector: string;
    /**
     * If true, the selected method allows unregistered calls, e.g. calls
     * that don't identify any user or application.
     *
     * @generated from protobuf field: bool allow_unregistered_calls = 2;
     */
    allowUnregisteredCalls: boolean;
    /**
     * If true, the selected method should skip service control and the control
     * plane features, such as quota and billing, will not be available.
     * This flag is used by Google Cloud Endpoints to bypass checks for internal
     * methods, such as service health check methods.
     *
     * @generated from protobuf field: bool skip_service_control = 3;
     */
    skipServiceControl: boolean;
}
declare class Usage$Type extends MessageType<Usage> {
    constructor();
    create(value?: PartialMessage<Usage>): Usage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Usage): Usage;
    internalBinaryWrite(message: Usage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Usage
 */
export declare const Usage: Usage$Type;
declare class UsageRule$Type extends MessageType<UsageRule> {
    constructor();
    create(value?: PartialMessage<UsageRule>): UsageRule;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsageRule): UsageRule;
    internalBinaryWrite(message: UsageRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.UsageRule
 */
export declare const UsageRule: UsageRule$Type;
export {};
