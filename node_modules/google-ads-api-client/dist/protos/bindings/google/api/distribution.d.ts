import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../protobuf/any";
import { Timestamp } from "../protobuf/timestamp";
/**
 * `Distribution` contains summary statistics for a population of values. It
 * optionally contains a histogram representing the distribution of those values
 * across a set of buckets.
 *
 * The summary statistics are the count, mean, sum of the squared deviation from
 * the mean, the minimum, and the maximum of the set of population of values.
 * The histogram is based on a sequence of buckets and gives a count of values
 * that fall into each bucket. The boundaries of the buckets are given either
 * explicitly or by formulas for buckets of fixed or exponentially increasing
 * widths.
 *
 * Although it is not forbidden, it is generally a bad idea to include
 * non-finite values (infinities or NaNs) in the population of values, as this
 * will render the `mean` and `sum_of_squared_deviation` fields meaningless.
 *
 * @generated from protobuf message google.api.Distribution
 */
export interface Distribution {
    /**
     * The number of values in the population. Must be non-negative. This value
     * must equal the sum of the values in `bucket_counts` if a histogram is
     * provided.
     *
     * @generated from protobuf field: int64 count = 1;
     */
    count: bigint;
    /**
     * The arithmetic mean of the values in the population. If `count` is zero
     * then this field must be zero.
     *
     * @generated from protobuf field: double mean = 2;
     */
    mean: number;
    /**
     * The sum of squared deviations from the mean of the values in the
     * population. For values x_i this is:
     *
     *     Sum[i=1..n]((x_i - mean)^2)
     *
     * Knuth, "The Art of Computer Programming", Vol. 2, page 232, 3rd edition
     * describes Welford's method for accumulating this sum in one pass.
     *
     * If `count` is zero then this field must be zero.
     *
     * @generated from protobuf field: double sum_of_squared_deviation = 3;
     */
    sumOfSquaredDeviation: number;
    /**
     * If specified, contains the range of the population values. The field
     * must not be present if the `count` is zero.
     *
     * @generated from protobuf field: google.api.Distribution.Range range = 4;
     */
    range?: Distribution_Range;
    /**
     * Defines the histogram bucket boundaries. If the distribution does not
     * contain a histogram, then omit this field.
     *
     * @generated from protobuf field: google.api.Distribution.BucketOptions bucket_options = 6;
     */
    bucketOptions?: Distribution_BucketOptions;
    /**
     * The number of values in each bucket of the histogram, as described in
     * `bucket_options`. If the distribution does not have a histogram, then omit
     * this field. If there is a histogram, then the sum of the values in
     * `bucket_counts` must equal the value in the `count` field of the
     * distribution.
     *
     * If present, `bucket_counts` should contain N values, where N is the number
     * of buckets specified in `bucket_options`. If you supply fewer than N
     * values, the remaining values are assumed to be 0.
     *
     * The order of the values in `bucket_counts` follows the bucket numbering
     * schemes described for the three bucket types. The first value must be the
     * count for the underflow bucket (number 0). The next N-2 values are the
     * counts for the finite buckets (number 1 through N-2). The N'th value in
     * `bucket_counts` is the count for the overflow bucket (number N-1).
     *
     * @generated from protobuf field: repeated int64 bucket_counts = 7;
     */
    bucketCounts: bigint[];
    /**
     * Must be in increasing order of `value` field.
     *
     * @generated from protobuf field: repeated google.api.Distribution.Exemplar exemplars = 10;
     */
    exemplars: Distribution_Exemplar[];
}
/**
 * The range of the population values.
 *
 * @generated from protobuf message google.api.Distribution.Range
 */
export interface Distribution_Range {
    /**
     * The minimum of the population values.
     *
     * @generated from protobuf field: double min = 1;
     */
    min: number;
    /**
     * The maximum of the population values.
     *
     * @generated from protobuf field: double max = 2;
     */
    max: number;
}
/**
 * `BucketOptions` describes the bucket boundaries used to create a histogram
 * for the distribution. The buckets can be in a linear sequence, an
 * exponential sequence, or each bucket can be specified explicitly.
 * `BucketOptions` does not include the number of values in each bucket.
 *
 * A bucket has an inclusive lower bound and exclusive upper bound for the
 * values that are counted for that bucket. The upper bound of a bucket must
 * be strictly greater than the lower bound. The sequence of N buckets for a
 * distribution consists of an underflow bucket (number 0), zero or more
 * finite buckets (number 1 through N - 2) and an overflow bucket (number N -
 * 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the
 * same as the upper bound of bucket i - 1. The buckets span the whole range
 * of finite values: lower bound of the underflow bucket is -infinity and the
 * upper bound of the overflow bucket is +infinity. The finite buckets are
 * so-called because both bounds are finite.
 *
 * @generated from protobuf message google.api.Distribution.BucketOptions
 */
export interface Distribution_BucketOptions {
    /**
     * @generated from protobuf oneof: options
     */
    options: {
        oneofKind: "linearBuckets";
        /**
         * The linear bucket.
         *
         * @generated from protobuf field: google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
         */
        linearBuckets: Distribution_BucketOptions_Linear;
    } | {
        oneofKind: "exponentialBuckets";
        /**
         * The exponential buckets.
         *
         * @generated from protobuf field: google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
         */
        exponentialBuckets: Distribution_BucketOptions_Exponential;
    } | {
        oneofKind: "explicitBuckets";
        /**
         * The explicit buckets.
         *
         * @generated from protobuf field: google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
         */
        explicitBuckets: Distribution_BucketOptions_Explicit;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Specifies a linear sequence of buckets that all have the same width
 * (except overflow and underflow). Each bucket represents a constant
 * absolute uncertainty on the specific value in the bucket.
 *
 * There are `num_finite_buckets + 2` (= N) buckets. Bucket `i` has the
 * following boundaries:
 *
 *    Upper bound (0 <= i < N-1):     offset + (width * i).
 *    Lower bound (1 <= i < N):       offset + (width * (i - 1)).
 *
 * @generated from protobuf message google.api.Distribution.BucketOptions.Linear
 */
export interface Distribution_BucketOptions_Linear {
    /**
     * Must be greater than 0.
     *
     * @generated from protobuf field: int32 num_finite_buckets = 1;
     */
    numFiniteBuckets: number;
    /**
     * Must be greater than 0.
     *
     * @generated from protobuf field: double width = 2;
     */
    width: number;
    /**
     * Lower bound of the first bucket.
     *
     * @generated from protobuf field: double offset = 3;
     */
    offset: number;
}
/**
 * Specifies an exponential sequence of buckets that have a width that is
 * proportional to the value of the lower bound. Each bucket represents a
 * constant relative uncertainty on a specific value in the bucket.
 *
 * There are `num_finite_buckets + 2` (= N) buckets. Bucket `i` has the
 * following boundaries:
 *
 *    Upper bound (0 <= i < N-1):     scale * (growth_factor ^ i).
 *    Lower bound (1 <= i < N):       scale * (growth_factor ^ (i - 1)).
 *
 * @generated from protobuf message google.api.Distribution.BucketOptions.Exponential
 */
export interface Distribution_BucketOptions_Exponential {
    /**
     * Must be greater than 0.
     *
     * @generated from protobuf field: int32 num_finite_buckets = 1;
     */
    numFiniteBuckets: number;
    /**
     * Must be greater than 1.
     *
     * @generated from protobuf field: double growth_factor = 2;
     */
    growthFactor: number;
    /**
     * Must be greater than 0.
     *
     * @generated from protobuf field: double scale = 3;
     */
    scale: number;
}
/**
 * Specifies a set of buckets with arbitrary widths.
 *
 * There are `size(bounds) + 1` (= N) buckets. Bucket `i` has the following
 * boundaries:
 *
 *    Upper bound (0 <= i < N-1):     bounds[i]
 *    Lower bound (1 <= i < N);       bounds[i - 1]
 *
 * The `bounds` field must contain at least one element. If `bounds` has
 * only one element, then there are no finite buckets, and that single
 * element is the common boundary of the overflow and underflow buckets.
 *
 * @generated from protobuf message google.api.Distribution.BucketOptions.Explicit
 */
export interface Distribution_BucketOptions_Explicit {
    /**
     * The values must be monotonically increasing.
     *
     * @generated from protobuf field: repeated double bounds = 1;
     */
    bounds: number[];
}
/**
 * Exemplars are example points that may be used to annotate aggregated
 * distribution values. They are metadata that gives information about a
 * particular value added to a Distribution bucket, such as a trace ID that
 * was active when a value was added. They may contain further information,
 * such as a example values and timestamps, origin, etc.
 *
 * @generated from protobuf message google.api.Distribution.Exemplar
 */
export interface Distribution_Exemplar {
    /**
     * Value of the exemplar point. This value determines to which bucket the
     * exemplar belongs.
     *
     * @generated from protobuf field: double value = 1;
     */
    value: number;
    /**
     * The observation (sampling) time of the above value.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * Contextual information about the example value. Examples are:
     *
     *   Trace: type.googleapis.com/google.monitoring.v3.SpanContext
     *
     *   Literal string: type.googleapis.com/google.protobuf.StringValue
     *
     *   Labels dropped during aggregation:
     *     type.googleapis.com/google.monitoring.v3.DroppedLabels
     *
     * There may be only a single attachment of any given message type in a
     * single exemplar, and this is enforced by the system.
     *
     * @generated from protobuf field: repeated google.protobuf.Any attachments = 3;
     */
    attachments: Any[];
}
declare class Distribution$Type extends MessageType<Distribution> {
    constructor();
    create(value?: PartialMessage<Distribution>): Distribution;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution): Distribution;
    internalBinaryWrite(message: Distribution, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution
 */
export declare const Distribution: Distribution$Type;
declare class Distribution_Range$Type extends MessageType<Distribution_Range> {
    constructor();
    create(value?: PartialMessage<Distribution_Range>): Distribution_Range;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_Range): Distribution_Range;
    internalBinaryWrite(message: Distribution_Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.Range
 */
export declare const Distribution_Range: Distribution_Range$Type;
declare class Distribution_BucketOptions$Type extends MessageType<Distribution_BucketOptions> {
    constructor();
    create(value?: PartialMessage<Distribution_BucketOptions>): Distribution_BucketOptions;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_BucketOptions): Distribution_BucketOptions;
    internalBinaryWrite(message: Distribution_BucketOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.BucketOptions
 */
export declare const Distribution_BucketOptions: Distribution_BucketOptions$Type;
declare class Distribution_BucketOptions_Linear$Type extends MessageType<Distribution_BucketOptions_Linear> {
    constructor();
    create(value?: PartialMessage<Distribution_BucketOptions_Linear>): Distribution_BucketOptions_Linear;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_BucketOptions_Linear): Distribution_BucketOptions_Linear;
    internalBinaryWrite(message: Distribution_BucketOptions_Linear, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.BucketOptions.Linear
 */
export declare const Distribution_BucketOptions_Linear: Distribution_BucketOptions_Linear$Type;
declare class Distribution_BucketOptions_Exponential$Type extends MessageType<Distribution_BucketOptions_Exponential> {
    constructor();
    create(value?: PartialMessage<Distribution_BucketOptions_Exponential>): Distribution_BucketOptions_Exponential;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_BucketOptions_Exponential): Distribution_BucketOptions_Exponential;
    internalBinaryWrite(message: Distribution_BucketOptions_Exponential, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.BucketOptions.Exponential
 */
export declare const Distribution_BucketOptions_Exponential: Distribution_BucketOptions_Exponential$Type;
declare class Distribution_BucketOptions_Explicit$Type extends MessageType<Distribution_BucketOptions_Explicit> {
    constructor();
    create(value?: PartialMessage<Distribution_BucketOptions_Explicit>): Distribution_BucketOptions_Explicit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_BucketOptions_Explicit): Distribution_BucketOptions_Explicit;
    internalBinaryWrite(message: Distribution_BucketOptions_Explicit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.BucketOptions.Explicit
 */
export declare const Distribution_BucketOptions_Explicit: Distribution_BucketOptions_Explicit$Type;
declare class Distribution_Exemplar$Type extends MessageType<Distribution_Exemplar> {
    constructor();
    create(value?: PartialMessage<Distribution_Exemplar>): Distribution_Exemplar;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Distribution_Exemplar): Distribution_Exemplar;
    internalBinaryWrite(message: Distribution_Exemplar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Distribution.Exemplar
 */
export declare const Distribution_Exemplar: Distribution_Exemplar$Type;
export {};
