"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logging_LoggingDestination = exports.Logging = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class Logging$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.Logging", [
            { no: 1, name: "producer_destinations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Logging_LoggingDestination },
            { no: 2, name: "consumer_destinations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Logging_LoggingDestination }
        ]);
    }
    create(value) {
        const message = { producerDestinations: [], consumerDestinations: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.Logging.LoggingDestination producer_destinations */ 1:
                    message.producerDestinations.push(exports.Logging_LoggingDestination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.Logging.LoggingDestination consumer_destinations */ 2:
                    message.consumerDestinations.push(exports.Logging_LoggingDestination.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.Logging.LoggingDestination producer_destinations = 1; */
        for (let i = 0; i < message.producerDestinations.length; i++)
            exports.Logging_LoggingDestination.internalBinaryWrite(message.producerDestinations[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.Logging.LoggingDestination consumer_destinations = 2; */
        for (let i = 0; i < message.consumerDestinations.length; i++)
            exports.Logging_LoggingDestination.internalBinaryWrite(message.consumerDestinations[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Logging
 */
exports.Logging = new Logging$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Logging_LoggingDestination$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.Logging.LoggingDestination", [
            { no: 3, name: "monitored_resource", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "logs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { monitoredResource: "", logs: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string monitored_resource */ 3:
                    message.monitoredResource = reader.string();
                    break;
                case /* repeated string logs */ 1:
                    message.logs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string monitored_resource = 3; */
        if (message.monitoredResource !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.monitoredResource);
        /* repeated string logs = 1; */
        for (let i = 0; i < message.logs.length; i++)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.logs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Logging.LoggingDestination
 */
exports.Logging_LoggingDestination = new Logging_LoggingDestination$Type();
//# sourceMappingURL=logging.js.map