"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuotaLimit = exports.MetricRule = exports.Quota = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class Quota$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.Quota", [
            { no: 3, name: "limits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.QuotaLimit },
            { no: 4, name: "metric_rules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MetricRule }
        ]);
    }
    create(value) {
        const message = { limits: [], metricRules: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.QuotaLimit limits */ 3:
                    message.limits.push(exports.QuotaLimit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.MetricRule metric_rules */ 4:
                    message.metricRules.push(exports.MetricRule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.QuotaLimit limits = 3; */
        for (let i = 0; i < message.limits.length; i++)
            exports.QuotaLimit.internalBinaryWrite(message.limits[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.MetricRule metric_rules = 4; */
        for (let i = 0; i < message.metricRules.length; i++)
            exports.MetricRule.internalBinaryWrite(message.metricRules[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Quota
 */
exports.Quota = new Quota$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricRule$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.MetricRule", [
            { no: 1, name: "selector", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metric_costs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ } }
        ]);
    }
    create(value) {
        const message = { selector: "", metricCosts: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string selector */ 1:
                    message.selector = reader.string();
                    break;
                case /* map<string, int64> metric_costs */ 2:
                    this.binaryReadMap2(message.metricCosts, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int64().toBigInt();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.MetricRule.metric_costs");
            }
        }
        map[key ?? ""] = val ?? 0n;
    }
    internalBinaryWrite(message, writer, options) {
        /* string selector = 1; */
        if (message.selector !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.selector);
        /* map<string, int64> metric_costs = 2; */
        for (let k of Object.keys(message.metricCosts))
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k).tag(2, runtime_1.WireType.Varint).int64(message.metricCosts[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.MetricRule
 */
exports.MetricRule = new MetricRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuotaLimit$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.QuotaLimit", [
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "default_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "max_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "free_tier", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "duration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "metric", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "values", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ } },
            { no: 12, name: "display_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { name: "", description: "", defaultLimit: 0n, maxLimit: 0n, freeTier: 0n, duration: "", metric: "", unit: "", values: {}, displayName: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* int64 default_limit */ 3:
                    message.defaultLimit = reader.int64().toBigInt();
                    break;
                case /* int64 max_limit */ 4:
                    message.maxLimit = reader.int64().toBigInt();
                    break;
                case /* int64 free_tier */ 7:
                    message.freeTier = reader.int64().toBigInt();
                    break;
                case /* string duration */ 5:
                    message.duration = reader.string();
                    break;
                case /* string metric */ 8:
                    message.metric = reader.string();
                    break;
                case /* string unit */ 9:
                    message.unit = reader.string();
                    break;
                case /* map<string, int64> values */ 10:
                    this.binaryReadMap10(message.values, reader, options);
                    break;
                case /* string display_name */ 12:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int64().toBigInt();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.QuotaLimit.values");
            }
        }
        map[key ?? ""] = val ?? 0n;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.description);
        /* int64 default_limit = 3; */
        if (message.defaultLimit !== 0n)
            writer.tag(3, runtime_1.WireType.Varint).int64(message.defaultLimit);
        /* int64 max_limit = 4; */
        if (message.maxLimit !== 0n)
            writer.tag(4, runtime_1.WireType.Varint).int64(message.maxLimit);
        /* int64 free_tier = 7; */
        if (message.freeTier !== 0n)
            writer.tag(7, runtime_1.WireType.Varint).int64(message.freeTier);
        /* string duration = 5; */
        if (message.duration !== "")
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.duration);
        /* string metric = 8; */
        if (message.metric !== "")
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.metric);
        /* string unit = 9; */
        if (message.unit !== "")
            writer.tag(9, runtime_1.WireType.LengthDelimited).string(message.unit);
        /* map<string, int64> values = 10; */
        for (let k of Object.keys(message.values))
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k).tag(2, runtime_1.WireType.Varint).int64(message.values[k]).join();
        /* string display_name = 12; */
        if (message.displayName !== "")
            writer.tag(12, runtime_1.WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.QuotaLimit
 */
exports.QuotaLimit = new QuotaLimit$Type();
//# sourceMappingURL=quota.js.map