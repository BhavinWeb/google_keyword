"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Distribution_ExplicitBuckets = exports.Distribution_ExponentialBuckets = exports.Distribution_LinearBuckets = exports.Distribution = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const distribution_1 = require("../../distribution");
// @generated message type with reflection information, may provide speed optimized methods
class Distribution$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.servicecontrol.v1.Distribution", [
            { no: 1, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mean", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "minimum", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "maximum", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "sum_of_squared_deviation", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "bucket_counts", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "linear_buckets", kind: "message", oneof: "bucketOption", T: () => exports.Distribution_LinearBuckets },
            { no: 8, name: "exponential_buckets", kind: "message", oneof: "bucketOption", T: () => exports.Distribution_ExponentialBuckets },
            { no: 9, name: "explicit_buckets", kind: "message", oneof: "bucketOption", T: () => exports.Distribution_ExplicitBuckets },
            { no: 10, name: "exemplars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => distribution_1.Distribution_Exemplar }
        ]);
    }
    create(value) {
        const message = { count: 0n, mean: 0, minimum: 0, maximum: 0, sumOfSquaredDeviation: 0, bucketCounts: [], bucketOption: { oneofKind: undefined }, exemplars: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 count */ 1:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* double mean */ 2:
                    message.mean = reader.double();
                    break;
                case /* double minimum */ 3:
                    message.minimum = reader.double();
                    break;
                case /* double maximum */ 4:
                    message.maximum = reader.double();
                    break;
                case /* double sum_of_squared_deviation */ 5:
                    message.sumOfSquaredDeviation = reader.double();
                    break;
                case /* repeated int64 bucket_counts */ 6:
                    if (wireType === runtime_2.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.bucketCounts.push(reader.int64().toBigInt());
                    else
                        message.bucketCounts.push(reader.int64().toBigInt());
                    break;
                case /* google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets */ 7:
                    message.bucketOption = {
                        oneofKind: "linearBuckets",
                        linearBuckets: exports.Distribution_LinearBuckets.internalBinaryRead(reader, reader.uint32(), options, message.bucketOption.linearBuckets)
                    };
                    break;
                case /* google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets */ 8:
                    message.bucketOption = {
                        oneofKind: "exponentialBuckets",
                        exponentialBuckets: exports.Distribution_ExponentialBuckets.internalBinaryRead(reader, reader.uint32(), options, message.bucketOption.exponentialBuckets)
                    };
                    break;
                case /* google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets */ 9:
                    message.bucketOption = {
                        oneofKind: "explicitBuckets",
                        explicitBuckets: exports.Distribution_ExplicitBuckets.internalBinaryRead(reader, reader.uint32(), options, message.bucketOption.explicitBuckets)
                    };
                    break;
                case /* repeated google.api.Distribution.Exemplar exemplars */ 10:
                    message.exemplars.push(distribution_1.Distribution_Exemplar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_1.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 count = 1; */
        if (message.count !== 0n)
            writer.tag(1, runtime_2.WireType.Varint).int64(message.count);
        /* double mean = 2; */
        if (message.mean !== 0)
            writer.tag(2, runtime_2.WireType.Bit64).double(message.mean);
        /* double minimum = 3; */
        if (message.minimum !== 0)
            writer.tag(3, runtime_2.WireType.Bit64).double(message.minimum);
        /* double maximum = 4; */
        if (message.maximum !== 0)
            writer.tag(4, runtime_2.WireType.Bit64).double(message.maximum);
        /* double sum_of_squared_deviation = 5; */
        if (message.sumOfSquaredDeviation !== 0)
            writer.tag(5, runtime_2.WireType.Bit64).double(message.sumOfSquaredDeviation);
        /* repeated int64 bucket_counts = 6; */
        if (message.bucketCounts.length) {
            writer.tag(6, runtime_2.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.bucketCounts.length; i++)
                writer.int64(message.bucketCounts[i]);
            writer.join();
        }
        /* google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7; */
        if (message.bucketOption.oneofKind === "linearBuckets")
            exports.Distribution_LinearBuckets.internalBinaryWrite(message.bucketOption.linearBuckets, writer.tag(7, runtime_2.WireType.LengthDelimited).fork(), options).join();
        /* google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8; */
        if (message.bucketOption.oneofKind === "exponentialBuckets")
            exports.Distribution_ExponentialBuckets.internalBinaryWrite(message.bucketOption.exponentialBuckets, writer.tag(8, runtime_2.WireType.LengthDelimited).fork(), options).join();
        /* google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9; */
        if (message.bucketOption.oneofKind === "explicitBuckets")
            exports.Distribution_ExplicitBuckets.internalBinaryWrite(message.bucketOption.explicitBuckets, writer.tag(9, runtime_2.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.Distribution.Exemplar exemplars = 10; */
        for (let i = 0; i < message.exemplars.length; i++)
            distribution_1.Distribution_Exemplar.internalBinaryWrite(message.exemplars[i], writer.tag(10, runtime_2.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.Distribution
 */
exports.Distribution = new Distribution$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Distribution_LinearBuckets$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.servicecontrol.v1.Distribution.LinearBuckets", [
            { no: 1, name: "num_finite_buckets", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "width", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "offset", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { numFiniteBuckets: 0, width: 0, offset: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 num_finite_buckets */ 1:
                    message.numFiniteBuckets = reader.int32();
                    break;
                case /* double width */ 2:
                    message.width = reader.double();
                    break;
                case /* double offset */ 3:
                    message.offset = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_1.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 num_finite_buckets = 1; */
        if (message.numFiniteBuckets !== 0)
            writer.tag(1, runtime_2.WireType.Varint).int32(message.numFiniteBuckets);
        /* double width = 2; */
        if (message.width !== 0)
            writer.tag(2, runtime_2.WireType.Bit64).double(message.width);
        /* double offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, runtime_2.WireType.Bit64).double(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.Distribution.LinearBuckets
 */
exports.Distribution_LinearBuckets = new Distribution_LinearBuckets$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Distribution_ExponentialBuckets$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.servicecontrol.v1.Distribution.ExponentialBuckets", [
            { no: 1, name: "num_finite_buckets", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "growth_factor", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "scale", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { numFiniteBuckets: 0, growthFactor: 0, scale: 0 };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 num_finite_buckets */ 1:
                    message.numFiniteBuckets = reader.int32();
                    break;
                case /* double growth_factor */ 2:
                    message.growthFactor = reader.double();
                    break;
                case /* double scale */ 3:
                    message.scale = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_1.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 num_finite_buckets = 1; */
        if (message.numFiniteBuckets !== 0)
            writer.tag(1, runtime_2.WireType.Varint).int32(message.numFiniteBuckets);
        /* double growth_factor = 2; */
        if (message.growthFactor !== 0)
            writer.tag(2, runtime_2.WireType.Bit64).double(message.growthFactor);
        /* double scale = 3; */
        if (message.scale !== 0)
            writer.tag(3, runtime_2.WireType.Bit64).double(message.scale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.Distribution.ExponentialBuckets
 */
exports.Distribution_ExponentialBuckets = new Distribution_ExponentialBuckets$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Distribution_ExplicitBuckets$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.servicecontrol.v1.Distribution.ExplicitBuckets", [
            { no: 1, name: "bounds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { bounds: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated double bounds */ 1:
                    if (wireType === runtime_2.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.bounds.push(reader.double());
                    else
                        message.bounds.push(reader.double());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_1.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated double bounds = 1; */
        if (message.bounds.length) {
            writer.tag(1, runtime_2.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.bounds.length; i++)
                writer.double(message.bounds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.Distribution.ExplicitBuckets
 */
exports.Distribution_ExplicitBuckets = new Distribution_ExplicitBuckets$Type();
//# sourceMappingURL=distribution.js.map