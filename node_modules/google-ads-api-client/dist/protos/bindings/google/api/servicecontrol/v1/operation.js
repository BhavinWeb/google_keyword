"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operation = exports.Operation_Importance = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const any_1 = require("../../../protobuf/any");
const log_entry_1 = require("./log_entry");
const metric_value_1 = require("./metric_value");
const timestamp_1 = require("../../../protobuf/timestamp");
/**
 * Defines the importance of the data contained in the operation.
 *
 * @generated from protobuf enum google.api.servicecontrol.v1.Operation.Importance
 */
var Operation_Importance;
(function (Operation_Importance) {
    /**
     * Allows data caching, batching, and aggregation. It provides
     * higher performance with higher data loss risk.
     *
     * @generated from protobuf enum value: LOW = 0;
     */
    Operation_Importance[Operation_Importance["LOW"] = 0] = "LOW";
    /**
     * Disables data aggregation to minimize data loss. It is for operations
     * that contains significant monetary value or audit trail. This feature
     * only applies to the client libraries.
     *
     * @generated from protobuf enum value: HIGH = 1;
     */
    Operation_Importance[Operation_Importance["HIGH"] = 1] = "HIGH";
})(Operation_Importance = exports.Operation_Importance || (exports.Operation_Importance = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Operation$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.servicecontrol.v1.Operation", [
            { no: 1, name: "operation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "consumer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "start_time", kind: "message", T: () => timestamp_1.Timestamp },
            { no: 5, name: "end_time", kind: "message", T: () => timestamp_1.Timestamp },
            { no: 6, name: "labels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 7, name: "metric_value_sets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => metric_value_1.MetricValueSet },
            { no: 8, name: "log_entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => log_entry_1.LogEntry },
            { no: 11, name: "importance", kind: "enum", T: () => ["google.api.servicecontrol.v1.Operation.Importance", Operation_Importance] },
            { no: 16, name: "extensions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => any_1.Any }
        ]);
    }
    create(value) {
        const message = { operationId: "", operationName: "", consumerId: "", labels: {}, metricValueSets: [], logEntries: [], importance: 0, extensions: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operation_id */ 1:
                    message.operationId = reader.string();
                    break;
                case /* string operation_name */ 2:
                    message.operationName = reader.string();
                    break;
                case /* string consumer_id */ 3:
                    message.consumerId = reader.string();
                    break;
                case /* google.protobuf.Timestamp start_time */ 4:
                    message.startTime = timestamp_1.Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* google.protobuf.Timestamp end_time */ 5:
                    message.endTime = timestamp_1.Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* map<string, string> labels */ 6:
                    this.binaryReadMap6(message.labels, reader, options);
                    break;
                case /* repeated google.api.servicecontrol.v1.MetricValueSet metric_value_sets */ 7:
                    message.metricValueSets.push(metric_value_1.MetricValueSet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.api.servicecontrol.v1.LogEntry log_entries */ 8:
                    message.logEntries.push(log_entry_1.LogEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.api.servicecontrol.v1.Operation.Importance importance */ 11:
                    message.importance = reader.int32();
                    break;
                case /* repeated google.protobuf.Any extensions */ 16:
                    message.extensions.push(any_1.Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field google.api.servicecontrol.v1.Operation.labels");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* string operation_id = 1; */
        if (message.operationId !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.operationId);
        /* string operation_name = 2; */
        if (message.operationName !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.operationName);
        /* string consumer_id = 3; */
        if (message.consumerId !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.consumerId);
        /* google.protobuf.Timestamp start_time = 4; */
        if (message.startTime)
            timestamp_1.Timestamp.internalBinaryWrite(message.startTime, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_time = 5; */
        if (message.endTime)
            timestamp_1.Timestamp.internalBinaryWrite(message.endTime, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> labels = 6; */
        for (let k of Object.keys(message.labels))
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.LengthDelimited).string(k).tag(2, runtime_1.WireType.LengthDelimited).string(message.labels[k]).join();
        /* repeated google.api.servicecontrol.v1.MetricValueSet metric_value_sets = 7; */
        for (let i = 0; i < message.metricValueSets.length; i++)
            metric_value_1.MetricValueSet.internalBinaryWrite(message.metricValueSets[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated google.api.servicecontrol.v1.LogEntry log_entries = 8; */
        for (let i = 0; i < message.logEntries.length; i++)
            log_entry_1.LogEntry.internalBinaryWrite(message.logEntries[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* google.api.servicecontrol.v1.Operation.Importance importance = 11; */
        if (message.importance !== 0)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.importance);
        /* repeated google.protobuf.Any extensions = 16; */
        for (let i = 0; i < message.extensions.length; i++)
            any_1.Any.internalBinaryWrite(message.extensions[i], writer.tag(16, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.servicecontrol.v1.Operation
 */
exports.Operation = new Operation$Type();
//# sourceMappingURL=operation.js.map