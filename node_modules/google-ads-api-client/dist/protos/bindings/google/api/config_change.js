"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Advice = exports.ConfigChange = exports.ChangeType = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
/**
 * Classifies set of possible modifications to an object in the service
 * configuration.
 *
 * @generated from protobuf enum google.api.ChangeType
 */
var ChangeType;
(function (ChangeType) {
    /**
     * No value was provided.
     *
     * @generated from protobuf enum value: CHANGE_TYPE_UNSPECIFIED = 0;
     */
    ChangeType[ChangeType["CHANGE_TYPE_UNSPECIFIED"] = 0] = "CHANGE_TYPE_UNSPECIFIED";
    /**
     * The changed object exists in the 'new' service configuration, but not
     * in the 'old' service configuration.
     *
     * @generated from protobuf enum value: ADDED = 1;
     */
    ChangeType[ChangeType["ADDED"] = 1] = "ADDED";
    /**
     * The changed object exists in the 'old' service configuration, but not
     * in the 'new' service configuration.
     *
     * @generated from protobuf enum value: REMOVED = 2;
     */
    ChangeType[ChangeType["REMOVED"] = 2] = "REMOVED";
    /**
     * The changed object exists in both service configurations, but its value
     * is different.
     *
     * @generated from protobuf enum value: MODIFIED = 3;
     */
    ChangeType[ChangeType["MODIFIED"] = 3] = "MODIFIED";
})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ConfigChange$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.ConfigChange", [
            { no: 1, name: "element", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "old_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "change_type", kind: "enum", T: () => ["google.api.ChangeType", ChangeType] },
            { no: 5, name: "advices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.Advice }
        ]);
    }
    create(value) {
        const message = { element: "", oldValue: "", newValue: "", changeType: 0, advices: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string element */ 1:
                    message.element = reader.string();
                    break;
                case /* string old_value */ 2:
                    message.oldValue = reader.string();
                    break;
                case /* string new_value */ 3:
                    message.newValue = reader.string();
                    break;
                case /* google.api.ChangeType change_type */ 4:
                    message.changeType = reader.int32();
                    break;
                case /* repeated google.api.Advice advices */ 5:
                    message.advices.push(exports.Advice.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string element = 1; */
        if (message.element !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.element);
        /* string old_value = 2; */
        if (message.oldValue !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.oldValue);
        /* string new_value = 3; */
        if (message.newValue !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.newValue);
        /* google.api.ChangeType change_type = 4; */
        if (message.changeType !== 0)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.changeType);
        /* repeated google.api.Advice advices = 5; */
        for (let i = 0; i < message.advices.length; i++)
            exports.Advice.internalBinaryWrite(message.advices[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.ConfigChange
 */
exports.ConfigChange = new ConfigChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Advice$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.Advice", [
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { description: "" };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.Advice
 */
exports.Advice = new Advice$Type();
//# sourceMappingURL=config_change.js.map