import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Billing related configuration of the service.
 *
 * The following example shows how to configure monitored resources and metrics
 * for billing, `consumer_destinations` is the only supported destination and
 * the monitored resources need at least one label key
 * `cloud.googleapis.com/location` to indicate the location of the billing
 * usage, using different monitored resources between monitoring and billing is
 * recommended so they can be evolved independently:
 *
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/billing_branch
 *       labels:
 *       - key: cloud.googleapis.com/location
 *         description: |
 *           Predefined label to support billing location restriction.
 *       - key: city
 *         description: |
 *           Custom label to define the city where the library branch is located
 *           in.
 *       - key: name
 *         description: Custom label to define the name of the library branch.
 *     metrics:
 *     - name: library.googleapis.com/book/borrowed_count
 *       metric_kind: DELTA
 *       value_type: INT64
 *       unit: "1"
 *     billing:
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/billing_branch
 *         metrics:
 *         - library.googleapis.com/book/borrowed_count
 *
 * @generated from protobuf message google.api.Billing
 */
export interface Billing {
    /**
     * Billing configurations for sending metrics to the consumer project.
     * There can be multiple consumer destinations per service, each one must have
     * a different monitored resource type. A metric can be used in at most
     * one consumer destination.
     *
     * @generated from protobuf field: repeated google.api.Billing.BillingDestination consumer_destinations = 8;
     */
    consumerDestinations: Billing_BillingDestination[];
}
/**
 * Configuration of a specific billing destination (Currently only support
 * bill against consumer project).
 *
 * @generated from protobuf message google.api.Billing.BillingDestination
 */
export interface Billing_BillingDestination {
    /**
     * The monitored resource type. The type must be defined in
     * [Service.monitored_resources][google.api.Service.monitored_resources] section.
     *
     * @generated from protobuf field: string monitored_resource = 1;
     */
    monitoredResource: string;
    /**
     * Names of the metrics to report to this billing destination.
     * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
     *
     * @generated from protobuf field: repeated string metrics = 2;
     */
    metrics: string[];
}
declare class Billing$Type extends MessageType<Billing> {
    constructor();
    create(value?: PartialMessage<Billing>): Billing;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Billing): Billing;
    internalBinaryWrite(message: Billing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Billing
 */
export declare const Billing: Billing$Type;
declare class Billing_BillingDestination$Type extends MessageType<Billing_BillingDestination> {
    constructor();
    create(value?: PartialMessage<Billing_BillingDestination>): Billing_BillingDestination;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Billing_BillingDestination): Billing_BillingDestination;
    internalBinaryWrite(message: Billing_BillingDestination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.Billing.BillingDestination
 */
export declare const Billing_BillingDestination: Billing_BillingDestination$Type;
export {};
