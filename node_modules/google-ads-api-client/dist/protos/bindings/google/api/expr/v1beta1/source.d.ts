import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Source information collected at parse time.
 *
 * @generated from protobuf message google.api.expr.v1beta1.SourceInfo
 */
export interface SourceInfo {
    /**
     * The location name. All position information attached to an expression is
     * relative to this location.
     *
     * The location could be a file, UI element, or similar. For example,
     * `acme/app/AnvilPolicy.cel`.
     *
     * @generated from protobuf field: string location = 2;
     */
    location: string;
    /**
     * Monotonically increasing list of character offsets where newlines appear.
     *
     * The line number of a given position is the index `i` where for a given
     * `id` the `line_offsets[i] < id_positions[id] < line_offsets[i+1]`. The
     * column may be derivd from `id_positions[id] - line_offsets[i]`.
     *
     * @generated from protobuf field: repeated int32 line_offsets = 3;
     */
    lineOffsets: number[];
    /**
     * A map from the parse node id (e.g. `Expr.id`) to the character offset
     * within source.
     *
     * @generated from protobuf field: map<int32, int32> positions = 4;
     */
    positions: {
        [key: number]: number;
    };
}
/**
 * A specific position in source.
 *
 * @generated from protobuf message google.api.expr.v1beta1.SourcePosition
 */
export interface SourcePosition {
    /**
     * The soucre location name (e.g. file name).
     *
     * @generated from protobuf field: string location = 1;
     */
    location: string;
    /**
     * The character offset.
     *
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
    /**
     * The 1-based index of the starting line in the source text
     * where the issue occurs, or 0 if unknown.
     *
     * @generated from protobuf field: int32 line = 3;
     */
    line: number;
    /**
     * The 0-based index of the starting position within the line of source text
     * where the issue occurs.  Only meaningful if line is nonzer..
     *
     * @generated from protobuf field: int32 column = 4;
     */
    column: number;
}
declare class SourceInfo$Type extends MessageType<SourceInfo> {
    constructor();
    create(value?: PartialMessage<SourceInfo>): SourceInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceInfo): SourceInfo;
    private binaryReadMap4;
    internalBinaryWrite(message: SourceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.SourceInfo
 */
export declare const SourceInfo: SourceInfo$Type;
declare class SourcePosition$Type extends MessageType<SourcePosition> {
    constructor();
    create(value?: PartialMessage<SourcePosition>): SourcePosition;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourcePosition): SourcePosition;
    internalBinaryWrite(message: SourcePosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.SourcePosition
 */
export declare const SourcePosition: SourcePosition$Type;
export {};
