"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionDecl = exports.IdentDecl = exports.DeclType = exports.Decl = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const expr_1 = require("./expr");
// @generated message type with reflection information, may provide speed optimized methods
class Decl$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.expr.v1beta1.Decl", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "doc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ident", kind: "message", oneof: "kind", T: () => exports.IdentDecl },
            { no: 5, name: "function", kind: "message", oneof: "kind", T: () => exports.FunctionDecl }
        ]);
    }
    create(value) {
        const message = { id: 0, name: "", doc: "", kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string doc */ 3:
                    message.doc = reader.string();
                    break;
                case /* google.api.expr.v1beta1.IdentDecl ident */ 4:
                    message.kind = {
                        oneofKind: "ident",
                        ident: exports.IdentDecl.internalBinaryRead(reader, reader.uint32(), options, message.kind.ident)
                    };
                    break;
                case /* google.api.expr.v1beta1.FunctionDecl function */ 5:
                    message.kind = {
                        oneofKind: "function",
                        function: exports.FunctionDecl.internalBinaryRead(reader, reader.uint32(), options, message.kind.function)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.name);
        /* string doc = 3; */
        if (message.doc !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.doc);
        /* google.api.expr.v1beta1.IdentDecl ident = 4; */
        if (message.kind.oneofKind === "ident")
            exports.IdentDecl.internalBinaryWrite(message.kind.ident, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.FunctionDecl function = 5; */
        if (message.kind.oneofKind === "function")
            exports.FunctionDecl.internalBinaryWrite(message.kind.function, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.Decl
 */
exports.Decl = new Decl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeclType$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.expr.v1beta1.DeclType", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type_params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.DeclType }
        ]);
    }
    create(value) {
        const message = { id: 0, type: "", typeParams: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated google.api.expr.v1beta1.DeclType type_params */ 4:
                    message.typeParams.push(exports.DeclType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.type);
        /* repeated google.api.expr.v1beta1.DeclType type_params = 4; */
        for (let i = 0; i < message.typeParams.length; i++)
            exports.DeclType.internalBinaryWrite(message.typeParams[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.DeclType
 */
exports.DeclType = new DeclType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentDecl$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.expr.v1beta1.IdentDecl", [
            { no: 3, name: "type", kind: "message", T: () => exports.DeclType },
            { no: 4, name: "value", kind: "message", T: () => expr_1.Expr }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.api.expr.v1beta1.DeclType type */ 3:
                    message.type = exports.DeclType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* google.api.expr.v1beta1.Expr value */ 4:
                    message.value = expr_1.Expr.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.api.expr.v1beta1.DeclType type = 3; */
        if (message.type)
            exports.DeclType.internalBinaryWrite(message.type, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.Expr value = 4; */
        if (message.value)
            expr_1.Expr.internalBinaryWrite(message.value, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.IdentDecl
 */
exports.IdentDecl = new IdentDecl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FunctionDecl$Type extends runtime_5.MessageType {
    constructor() {
        super("google.api.expr.v1beta1.FunctionDecl", [
            { no: 1, name: "args", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IdentDecl },
            { no: 2, name: "return_type", kind: "message", T: () => exports.DeclType },
            { no: 3, name: "receiver_function", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { args: [], receiverFunction: false };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.api.expr.v1beta1.IdentDecl args */ 1:
                    message.args.push(exports.IdentDecl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.api.expr.v1beta1.DeclType return_type */ 2:
                    message.returnType = exports.DeclType.internalBinaryRead(reader, reader.uint32(), options, message.returnType);
                    break;
                case /* bool receiver_function */ 3:
                    message.receiverFunction = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated google.api.expr.v1beta1.IdentDecl args = 1; */
        for (let i = 0; i < message.args.length; i++)
            exports.IdentDecl.internalBinaryWrite(message.args[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* google.api.expr.v1beta1.DeclType return_type = 2; */
        if (message.returnType)
            exports.DeclType.internalBinaryWrite(message.returnType, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* bool receiver_function = 3; */
        if (message.receiverFunction !== false)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.receiverFunction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.api.expr.v1beta1.FunctionDecl
 */
exports.FunctionDecl = new FunctionDecl$Type();
//# sourceMappingURL=decl.js.map