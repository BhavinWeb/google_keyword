"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConformanceServiceClient = void 0;
const conformance_service_1 = require("./conformance_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Access a CEL implementation from another process or machine.
 * A CEL implementation is decomposed as a parser, a static checker,
 * and an evaluator.  Every CEL implementation is expected to provide
 * a server for this API.  The API will be used for conformance testing
 * and other utilities.
 *
 * @generated from protobuf service google.api.expr.conformance.v1alpha1.ConformanceService
 */
class ConformanceServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = conformance_service_1.ConformanceService.typeName;
        this.methods = conformance_service_1.ConformanceService.methods;
        this.options = conformance_service_1.ConformanceService.options;
    }
    /**
     * Transforms CEL source text into a parsed representation.
     *
     * @generated from protobuf rpc: Parse(google.api.expr.conformance.v1alpha1.ParseRequest) returns (google.api.expr.conformance.v1alpha1.ParseResponse);
     */
    parse(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Runs static checks on a parsed CEL representation and return
     * an annotated representation, or a set of issues.
     *
     * @generated from protobuf rpc: Check(google.api.expr.conformance.v1alpha1.CheckRequest) returns (google.api.expr.conformance.v1alpha1.CheckResponse);
     */
    check(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Evaluates a parsed or annotation CEL representation given
     * values of external bindings.
     *
     * @generated from protobuf rpc: Eval(google.api.expr.conformance.v1alpha1.EvalRequest) returns (google.api.expr.conformance.v1alpha1.EvalResponse);
     */
    eval(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ConformanceServiceClient = ConformanceServiceClient;
//# sourceMappingURL=conformance_service.client.js.map