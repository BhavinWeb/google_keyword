import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { EvalResponse } from "./conformance_service";
import type { EvalRequest } from "./conformance_service";
import type { CheckResponse } from "./conformance_service";
import type { CheckRequest } from "./conformance_service";
import type { ParseResponse } from "./conformance_service";
import type { ParseRequest } from "./conformance_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Access a CEL implementation from another process or machine.
 * A CEL implementation is decomposed as a parser, a static checker,
 * and an evaluator.  Every CEL implementation is expected to provide
 * a server for this API.  The API will be used for conformance testing
 * and other utilities.
 *
 * @generated from protobuf service google.api.expr.conformance.v1alpha1.ConformanceService
 */
export interface IConformanceServiceClient {
    /**
     * Transforms CEL source text into a parsed representation.
     *
     * @generated from protobuf rpc: Parse(google.api.expr.conformance.v1alpha1.ParseRequest) returns (google.api.expr.conformance.v1alpha1.ParseResponse);
     */
    parse(input: ParseRequest, options?: RpcOptions): UnaryCall<ParseRequest, ParseResponse>;
    /**
     * Runs static checks on a parsed CEL representation and return
     * an annotated representation, or a set of issues.
     *
     * @generated from protobuf rpc: Check(google.api.expr.conformance.v1alpha1.CheckRequest) returns (google.api.expr.conformance.v1alpha1.CheckResponse);
     */
    check(input: CheckRequest, options?: RpcOptions): UnaryCall<CheckRequest, CheckResponse>;
    /**
     * Evaluates a parsed or annotation CEL representation given
     * values of external bindings.
     *
     * @generated from protobuf rpc: Eval(google.api.expr.conformance.v1alpha1.EvalRequest) returns (google.api.expr.conformance.v1alpha1.EvalResponse);
     */
    eval(input: EvalRequest, options?: RpcOptions): UnaryCall<EvalRequest, EvalResponse>;
}
/**
 * Access a CEL implementation from another process or machine.
 * A CEL implementation is decomposed as a parser, a static checker,
 * and an evaluator.  Every CEL implementation is expected to provide
 * a server for this API.  The API will be used for conformance testing
 * and other utilities.
 *
 * @generated from protobuf service google.api.expr.conformance.v1alpha1.ConformanceService
 */
export declare class ConformanceServiceClient implements IConformanceServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * Transforms CEL source text into a parsed representation.
     *
     * @generated from protobuf rpc: Parse(google.api.expr.conformance.v1alpha1.ParseRequest) returns (google.api.expr.conformance.v1alpha1.ParseResponse);
     */
    parse(input: ParseRequest, options?: RpcOptions): UnaryCall<ParseRequest, ParseResponse>;
    /**
     * Runs static checks on a parsed CEL representation and return
     * an annotated representation, or a set of issues.
     *
     * @generated from protobuf rpc: Check(google.api.expr.conformance.v1alpha1.CheckRequest) returns (google.api.expr.conformance.v1alpha1.CheckResponse);
     */
    check(input: CheckRequest, options?: RpcOptions): UnaryCall<CheckRequest, CheckResponse>;
    /**
     * Evaluates a parsed or annotation CEL representation given
     * values of external bindings.
     *
     * @generated from protobuf rpc: Eval(google.api.expr.conformance.v1alpha1.EvalRequest) returns (google.api.expr.conformance.v1alpha1.EvalResponse);
     */
    eval(input: EvalRequest, options?: RpcOptions): UnaryCall<EvalRequest, EvalResponse>;
}
