"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickLocation = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class ClickLocation$Type extends runtime_5.MessageType {
    constructor() {
        super("google.ads.googleads.v11.common.ClickLocation", [
            { no: 6, name: "city", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "metro", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "most_specific", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "region", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string city */ 6:
                    message.city = reader.string();
                    break;
                case /* optional string country */ 7:
                    message.country = reader.string();
                    break;
                case /* optional string metro */ 8:
                    message.metro = reader.string();
                    break;
                case /* optional string most_specific */ 9:
                    message.mostSpecific = reader.string();
                    break;
                case /* optional string region */ 10:
                    message.region = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string city = 6; */
        if (message.city !== undefined)
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.city);
        /* optional string country = 7; */
        if (message.country !== undefined)
            writer.tag(7, runtime_1.WireType.LengthDelimited).string(message.country);
        /* optional string metro = 8; */
        if (message.metro !== undefined)
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.metro);
        /* optional string most_specific = 9; */
        if (message.mostSpecific !== undefined)
            writer.tag(9, runtime_1.WireType.LengthDelimited).string(message.mostSpecific);
        /* optional string region = 10; */
        if (message.region !== undefined)
            writer.tag(10, runtime_1.WireType.LengthDelimited).string(message.region);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.ClickLocation
 */
exports.ClickLocation = new ClickLocation$Type();
//# sourceMappingURL=click_location.js.map