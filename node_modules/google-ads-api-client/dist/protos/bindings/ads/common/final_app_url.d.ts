import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AppUrlOperatingSystemTypeEnum_AppUrlOperatingSystemType } from "../enums/app_url_operating_system_type";
/**
 * A URL for deep linking into an app for the given operating system.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.FinalAppUrl
 */
export interface FinalAppUrl {
    /**
     * The operating system targeted by this URL. Required.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.AppUrlOperatingSystemTypeEnum.AppUrlOperatingSystemType os_type = 1;
     */
    osType: AppUrlOperatingSystemTypeEnum_AppUrlOperatingSystemType;
    /**
     * The app deep link URL. Deep links specify a location in an app that
     * corresponds to the content you'd like to show, and should be of the form
     * {scheme}://{host_path}
     * The scheme identifies which app to open. For your app, you can use a custom
     * scheme that starts with the app's name. The host and path specify the
     * unique location in the app where your content exists.
     * Example: "exampleapp://productid_1234". Required.
     *
     * @generated from protobuf field: optional string url = 3;
     */
    url?: string;
}
declare class FinalAppUrl$Type extends MessageType<FinalAppUrl> {
    constructor();
    create(value?: PartialMessage<FinalAppUrl>): FinalAppUrl;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinalAppUrl): FinalAppUrl;
    internalBinaryWrite(message: FinalAppUrl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.FinalAppUrl
 */
export declare const FinalAppUrl: FinalAppUrl$Type;
export {};
