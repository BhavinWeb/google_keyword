import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A generic data container.
 *
 * @generated from protobuf message google.ads.googleads.v11.common.Value
 */
export interface Value {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "booleanValue";
        /**
         * A boolean.
         *
         * @generated from protobuf field: bool boolean_value = 1;
         */
        booleanValue: boolean;
    } | {
        oneofKind: "int64Value";
        /**
         * An int64.
         *
         * @generated from protobuf field: int64 int64_value = 2;
         */
        int64Value: bigint;
    } | {
        oneofKind: "floatValue";
        /**
         * A float.
         *
         * @generated from protobuf field: float float_value = 3;
         */
        floatValue: number;
    } | {
        oneofKind: "doubleValue";
        /**
         * A double.
         *
         * @generated from protobuf field: double double_value = 4;
         */
        doubleValue: number;
    } | {
        oneofKind: "stringValue";
        /**
         * A string.
         *
         * @generated from protobuf field: string string_value = 5;
         */
        stringValue: string;
    } | {
        oneofKind: undefined;
    };
}
declare class Value$Type extends MessageType<Value> {
    constructor();
    create(value?: PartialMessage<Value>): Value;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Value): Value;
    internalBinaryWrite(message: Value, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.common.Value
 */
export declare const Value: Value$Type;
export {};
