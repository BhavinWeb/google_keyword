"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldMaskErrorEnum = exports.FieldMaskErrorEnum_FieldMaskError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible field mask errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.FieldMaskErrorEnum.FieldMaskError
 */
var FieldMaskErrorEnum_FieldMaskError;
(function (FieldMaskErrorEnum_FieldMaskError) {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * The field mask must be provided for update operations.
     *
     * @generated from protobuf enum value: FIELD_MASK_MISSING = 5;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["FIELD_MASK_MISSING"] = 5] = "FIELD_MASK_MISSING";
    /**
     * The field mask must be empty for create and remove operations.
     *
     * @generated from protobuf enum value: FIELD_MASK_NOT_ALLOWED = 4;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["FIELD_MASK_NOT_ALLOWED"] = 4] = "FIELD_MASK_NOT_ALLOWED";
    /**
     * The field mask contained an invalid field.
     *
     * @generated from protobuf enum value: FIELD_NOT_FOUND = 2;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["FIELD_NOT_FOUND"] = 2] = "FIELD_NOT_FOUND";
    /**
     * The field mask updated a field with subfields. Fields with subfields may
     * be cleared, but not updated. To fix this, the field mask should select
     * all the subfields of the invalid field.
     *
     * @generated from protobuf enum value: FIELD_HAS_SUBFIELDS = 3;
     */
    FieldMaskErrorEnum_FieldMaskError[FieldMaskErrorEnum_FieldMaskError["FIELD_HAS_SUBFIELDS"] = 3] = "FIELD_HAS_SUBFIELDS";
})(FieldMaskErrorEnum_FieldMaskError = exports.FieldMaskErrorEnum_FieldMaskError || (exports.FieldMaskErrorEnum_FieldMaskError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class FieldMaskErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.FieldMaskErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.FieldMaskErrorEnum
 */
exports.FieldMaskErrorEnum = new FieldMaskErrorEnum$Type();
//# sourceMappingURL=field_mask_error.js.map