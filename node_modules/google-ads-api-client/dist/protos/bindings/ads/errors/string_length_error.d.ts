import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing possible string length errors.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.StringLengthErrorEnum
 */
export interface StringLengthErrorEnum {
}
/**
 * Enum describing possible string length errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.StringLengthErrorEnum.StringLengthError
 */
export declare enum StringLengthErrorEnum_StringLengthError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The specified field should have a least one non-whitespace character in
     * it.
     *
     * @generated from protobuf enum value: EMPTY = 4;
     */
    EMPTY = 4,
    /**
     * Too short.
     *
     * @generated from protobuf enum value: TOO_SHORT = 2;
     */
    TOO_SHORT = 2,
    /**
     * Too long.
     *
     * @generated from protobuf enum value: TOO_LONG = 3;
     */
    TOO_LONG = 3
}
declare class StringLengthErrorEnum$Type extends MessageType<StringLengthErrorEnum> {
    constructor();
    create(value?: PartialMessage<StringLengthErrorEnum>): StringLengthErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringLengthErrorEnum): StringLengthErrorEnum;
    internalBinaryWrite(message: StringLengthErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.StringLengthErrorEnum
 */
export declare const StringLengthErrorEnum: StringLengthErrorEnum$Type;
export {};
