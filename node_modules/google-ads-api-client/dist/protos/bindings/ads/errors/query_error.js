"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryErrorEnum = exports.QueryErrorEnum_QueryError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible query errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.QueryErrorEnum.QueryError
 */
var QueryErrorEnum_QueryError;
(function (QueryErrorEnum_QueryError) {
    /**
     * Name unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * Returned if all other query error reasons are not applicable.
     *
     * @generated from protobuf enum value: QUERY_ERROR = 50;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["QUERY_ERROR"] = 50] = "QUERY_ERROR";
    /**
     * A condition used in the query references an invalid enum constant.
     *
     * @generated from protobuf enum value: BAD_ENUM_CONSTANT = 18;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_ENUM_CONSTANT"] = 18] = "BAD_ENUM_CONSTANT";
    /**
     * Query contains an invalid escape sequence.
     *
     * @generated from protobuf enum value: BAD_ESCAPE_SEQUENCE = 7;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_ESCAPE_SEQUENCE"] = 7] = "BAD_ESCAPE_SEQUENCE";
    /**
     * Field name is invalid.
     *
     * @generated from protobuf enum value: BAD_FIELD_NAME = 12;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_FIELD_NAME"] = 12] = "BAD_FIELD_NAME";
    /**
     * Limit value is invalid (for example, not a number)
     *
     * @generated from protobuf enum value: BAD_LIMIT_VALUE = 15;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_LIMIT_VALUE"] = 15] = "BAD_LIMIT_VALUE";
    /**
     * Encountered number can not be parsed.
     *
     * @generated from protobuf enum value: BAD_NUMBER = 5;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_NUMBER"] = 5] = "BAD_NUMBER";
    /**
     * Invalid operator encountered.
     *
     * @generated from protobuf enum value: BAD_OPERATOR = 3;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_OPERATOR"] = 3] = "BAD_OPERATOR";
    /**
     * Parameter unknown or not supported.
     *
     * @generated from protobuf enum value: BAD_PARAMETER_NAME = 61;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_PARAMETER_NAME"] = 61] = "BAD_PARAMETER_NAME";
    /**
     * Parameter have invalid value.
     *
     * @generated from protobuf enum value: BAD_PARAMETER_VALUE = 62;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_PARAMETER_VALUE"] = 62] = "BAD_PARAMETER_VALUE";
    /**
     * Invalid resource type was specified in the FROM clause.
     *
     * @generated from protobuf enum value: BAD_RESOURCE_TYPE_IN_FROM_CLAUSE = 45;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_RESOURCE_TYPE_IN_FROM_CLAUSE"] = 45] = "BAD_RESOURCE_TYPE_IN_FROM_CLAUSE";
    /**
     * Non-ASCII symbol encountered outside of strings.
     *
     * @generated from protobuf enum value: BAD_SYMBOL = 2;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_SYMBOL"] = 2] = "BAD_SYMBOL";
    /**
     * Value is invalid.
     *
     * @generated from protobuf enum value: BAD_VALUE = 4;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["BAD_VALUE"] = 4] = "BAD_VALUE";
    /**
     * Date filters fail to restrict date to a range smaller than 31 days.
     * Applicable if the query is segmented by date.
     *
     * @generated from protobuf enum value: DATE_RANGE_TOO_WIDE = 36;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["DATE_RANGE_TOO_WIDE"] = 36] = "DATE_RANGE_TOO_WIDE";
    /**
     * Filters on date/week/month/quarter have a start date after
     * end date.
     *
     * @generated from protobuf enum value: DATE_RANGE_TOO_NARROW = 60;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["DATE_RANGE_TOO_NARROW"] = 60] = "DATE_RANGE_TOO_NARROW";
    /**
     * Expected AND between values with BETWEEN operator.
     *
     * @generated from protobuf enum value: EXPECTED_AND = 30;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_AND"] = 30] = "EXPECTED_AND";
    /**
     * Expecting ORDER BY to have BY.
     *
     * @generated from protobuf enum value: EXPECTED_BY = 14;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_BY"] = 14] = "EXPECTED_BY";
    /**
     * There was no dimension field selected.
     *
     * @generated from protobuf enum value: EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE = 37;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE"] = 37] = "EXPECTED_DIMENSION_FIELD_IN_SELECT_CLAUSE";
    /**
     * Missing filters on date related fields.
     *
     * @generated from protobuf enum value: EXPECTED_FILTERS_ON_DATE_RANGE = 55;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_FILTERS_ON_DATE_RANGE"] = 55] = "EXPECTED_FILTERS_ON_DATE_RANGE";
    /**
     * Missing FROM clause.
     *
     * @generated from protobuf enum value: EXPECTED_FROM = 44;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_FROM"] = 44] = "EXPECTED_FROM";
    /**
     * The operator used in the conditions requires the value to be a list.
     *
     * @generated from protobuf enum value: EXPECTED_LIST = 41;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_LIST"] = 41] = "EXPECTED_LIST";
    /**
     * Fields used in WHERE or ORDER BY clauses are missing from the SELECT
     * clause.
     *
     * @generated from protobuf enum value: EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE = 16;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE"] = 16] = "EXPECTED_REFERENCED_FIELD_IN_SELECT_CLAUSE";
    /**
     * SELECT is missing at the beginning of query.
     *
     * @generated from protobuf enum value: EXPECTED_SELECT = 13;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_SELECT"] = 13] = "EXPECTED_SELECT";
    /**
     * A list was passed as a value to a condition whose operator expects a
     * single value.
     *
     * @generated from protobuf enum value: EXPECTED_SINGLE_VALUE = 42;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_SINGLE_VALUE"] = 42] = "EXPECTED_SINGLE_VALUE";
    /**
     * Missing one or both values with BETWEEN operator.
     *
     * @generated from protobuf enum value: EXPECTED_VALUE_WITH_BETWEEN_OPERATOR = 29;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["EXPECTED_VALUE_WITH_BETWEEN_OPERATOR"] = 29] = "EXPECTED_VALUE_WITH_BETWEEN_OPERATOR";
    /**
     * Invalid date format. Expected 'YYYY-MM-DD'.
     *
     * @generated from protobuf enum value: INVALID_DATE_FORMAT = 38;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["INVALID_DATE_FORMAT"] = 38] = "INVALID_DATE_FORMAT";
    /**
     * Misaligned date value for the filter. The date should be the start of a
     * week/month/quarter if the filtered field is
     * segments.week/segments.month/segments.quarter.
     *
     * @generated from protobuf enum value: MISALIGNED_DATE_FOR_FILTER = 64;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["MISALIGNED_DATE_FOR_FILTER"] = 64] = "MISALIGNED_DATE_FOR_FILTER";
    /**
     * Value passed was not a string when it should have been. For example, it
     * was a number or unquoted literal.
     *
     * @generated from protobuf enum value: INVALID_STRING_VALUE = 57;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["INVALID_STRING_VALUE"] = 57] = "INVALID_STRING_VALUE";
    /**
     * A String value passed to the BETWEEN operator does not parse as a date.
     *
     * @generated from protobuf enum value: INVALID_VALUE_WITH_BETWEEN_OPERATOR = 26;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["INVALID_VALUE_WITH_BETWEEN_OPERATOR"] = 26] = "INVALID_VALUE_WITH_BETWEEN_OPERATOR";
    /**
     * The value passed to the DURING operator is not a Date range literal
     *
     * @generated from protobuf enum value: INVALID_VALUE_WITH_DURING_OPERATOR = 22;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["INVALID_VALUE_WITH_DURING_OPERATOR"] = 22] = "INVALID_VALUE_WITH_DURING_OPERATOR";
    /**
     * An invalid value was passed to the LIKE operator.
     *
     * @generated from protobuf enum value: INVALID_VALUE_WITH_LIKE_OPERATOR = 56;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["INVALID_VALUE_WITH_LIKE_OPERATOR"] = 56] = "INVALID_VALUE_WITH_LIKE_OPERATOR";
    /**
     * An operator was provided that is inapplicable to the field being
     * filtered.
     *
     * @generated from protobuf enum value: OPERATOR_FIELD_MISMATCH = 35;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["OPERATOR_FIELD_MISMATCH"] = 35] = "OPERATOR_FIELD_MISMATCH";
    /**
     * A Condition was found with an empty list.
     *
     * @generated from protobuf enum value: PROHIBITED_EMPTY_LIST_IN_CONDITION = 28;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_EMPTY_LIST_IN_CONDITION"] = 28] = "PROHIBITED_EMPTY_LIST_IN_CONDITION";
    /**
     * A condition used in the query references an unsupported enum constant.
     *
     * @generated from protobuf enum value: PROHIBITED_ENUM_CONSTANT = 54;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_ENUM_CONSTANT"] = 54] = "PROHIBITED_ENUM_CONSTANT";
    /**
     * Fields that are not allowed to be selected together were included in
     * the SELECT clause.
     *
     * @generated from protobuf enum value: PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE = 31;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE"] = 31] = "PROHIBITED_FIELD_COMBINATION_IN_SELECT_CLAUSE";
    /**
     * A field that is not orderable was included in the ORDER BY clause.
     *
     * @generated from protobuf enum value: PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE = 40;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE"] = 40] = "PROHIBITED_FIELD_IN_ORDER_BY_CLAUSE";
    /**
     * A field that is not selectable was included in the SELECT clause.
     *
     * @generated from protobuf enum value: PROHIBITED_FIELD_IN_SELECT_CLAUSE = 23;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_FIELD_IN_SELECT_CLAUSE"] = 23] = "PROHIBITED_FIELD_IN_SELECT_CLAUSE";
    /**
     * A field that is not filterable was included in the WHERE clause.
     *
     * @generated from protobuf enum value: PROHIBITED_FIELD_IN_WHERE_CLAUSE = 24;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_FIELD_IN_WHERE_CLAUSE"] = 24] = "PROHIBITED_FIELD_IN_WHERE_CLAUSE";
    /**
     * Resource type specified in the FROM clause is not supported by this
     * service.
     *
     * @generated from protobuf enum value: PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE = 43;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE"] = 43] = "PROHIBITED_RESOURCE_TYPE_IN_FROM_CLAUSE";
    /**
     * A field that comes from an incompatible resource was included in the
     * SELECT clause.
     *
     * @generated from protobuf enum value: PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE = 48;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE"] = 48] = "PROHIBITED_RESOURCE_TYPE_IN_SELECT_CLAUSE";
    /**
     * A field that comes from an incompatible resource was included in the
     * WHERE clause.
     *
     * @generated from protobuf enum value: PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE = 58;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE"] = 58] = "PROHIBITED_RESOURCE_TYPE_IN_WHERE_CLAUSE";
    /**
     * A metric incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     *
     * @generated from protobuf enum value: PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 49;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE"] = 49] = "PROHIBITED_METRIC_IN_SELECT_OR_WHERE_CLAUSE";
    /**
     * A segment incompatible with the main resource or other selected
     * segmenting resources was included in the SELECT or WHERE clause.
     *
     * @generated from protobuf enum value: PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE = 51;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE"] = 51] = "PROHIBITED_SEGMENT_IN_SELECT_OR_WHERE_CLAUSE";
    /**
     * A segment in the SELECT clause is incompatible with a metric in the
     * SELECT or WHERE clause.
     *
     * @generated from protobuf enum value: PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE = 53;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE"] = 53] = "PROHIBITED_SEGMENT_WITH_METRIC_IN_SELECT_OR_WHERE_CLAUSE";
    /**
     * The value passed to the limit clause is too low.
     *
     * @generated from protobuf enum value: LIMIT_VALUE_TOO_LOW = 25;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["LIMIT_VALUE_TOO_LOW"] = 25] = "LIMIT_VALUE_TOO_LOW";
    /**
     * Query has a string containing a newline character.
     *
     * @generated from protobuf enum value: PROHIBITED_NEWLINE_IN_STRING = 8;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_NEWLINE_IN_STRING"] = 8] = "PROHIBITED_NEWLINE_IN_STRING";
    /**
     * List contains values of different types.
     *
     * @generated from protobuf enum value: PROHIBITED_VALUE_COMBINATION_IN_LIST = 10;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_VALUE_COMBINATION_IN_LIST"] = 10] = "PROHIBITED_VALUE_COMBINATION_IN_LIST";
    /**
     * The values passed to the BETWEEN operator are not of the same type.
     *
     * @generated from protobuf enum value: PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR = 21;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR"] = 21] = "PROHIBITED_VALUE_COMBINATION_WITH_BETWEEN_OPERATOR";
    /**
     * Query contains unterminated string.
     *
     * @generated from protobuf enum value: STRING_NOT_TERMINATED = 6;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["STRING_NOT_TERMINATED"] = 6] = "STRING_NOT_TERMINATED";
    /**
     * Too many segments are specified in SELECT clause.
     *
     * @generated from protobuf enum value: TOO_MANY_SEGMENTS = 34;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["TOO_MANY_SEGMENTS"] = 34] = "TOO_MANY_SEGMENTS";
    /**
     * Query is incomplete and cannot be parsed.
     *
     * @generated from protobuf enum value: UNEXPECTED_END_OF_QUERY = 9;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNEXPECTED_END_OF_QUERY"] = 9] = "UNEXPECTED_END_OF_QUERY";
    /**
     * FROM clause cannot be specified in this query.
     *
     * @generated from protobuf enum value: UNEXPECTED_FROM_CLAUSE = 47;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNEXPECTED_FROM_CLAUSE"] = 47] = "UNEXPECTED_FROM_CLAUSE";
    /**
     * Query contains one or more unrecognized fields.
     *
     * @generated from protobuf enum value: UNRECOGNIZED_FIELD = 32;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNRECOGNIZED_FIELD"] = 32] = "UNRECOGNIZED_FIELD";
    /**
     * Query has an unexpected extra part.
     *
     * @generated from protobuf enum value: UNEXPECTED_INPUT = 11;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["UNEXPECTED_INPUT"] = 11] = "UNEXPECTED_INPUT";
    /**
     * Metrics cannot be requested for a manager account. To retrieve metrics,
     * issue separate requests against each client account under the manager
     * account.
     *
     * @generated from protobuf enum value: REQUESTED_METRICS_FOR_MANAGER = 59;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["REQUESTED_METRICS_FOR_MANAGER"] = 59] = "REQUESTED_METRICS_FOR_MANAGER";
    /**
     * The number of values (right-hand-side operands) in a filter exceeds the
     * limit.
     *
     * @generated from protobuf enum value: FILTER_HAS_TOO_MANY_VALUES = 63;
     */
    QueryErrorEnum_QueryError[QueryErrorEnum_QueryError["FILTER_HAS_TOO_MANY_VALUES"] = 63] = "FILTER_HAS_TOO_MANY_VALUES";
})(QueryErrorEnum_QueryError = exports.QueryErrorEnum_QueryError || (exports.QueryErrorEnum_QueryError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class QueryErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.QueryErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.QueryErrorEnum
 */
exports.QueryErrorEnum = new QueryErrorEnum$Type();
//# sourceMappingURL=query_error.js.map