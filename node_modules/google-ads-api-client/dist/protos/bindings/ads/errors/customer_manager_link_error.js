"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerManagerLinkErrorEnum = exports.CustomerManagerLinkErrorEnum_CustomerManagerLinkError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible CustomerManagerLink errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.CustomerManagerLinkErrorEnum.CustomerManagerLinkError
 */
var CustomerManagerLinkErrorEnum_CustomerManagerLinkError;
(function (CustomerManagerLinkErrorEnum_CustomerManagerLinkError) {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * No pending invitation.
     *
     * @generated from protobuf enum value: NO_PENDING_INVITE = 2;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["NO_PENDING_INVITE"] = 2] = "NO_PENDING_INVITE";
    /**
     * Attempt to operate on the same client more than once in the same call.
     *
     * @generated from protobuf enum value: SAME_CLIENT_MORE_THAN_ONCE_PER_CALL = 3;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["SAME_CLIENT_MORE_THAN_ONCE_PER_CALL"] = 3] = "SAME_CLIENT_MORE_THAN_ONCE_PER_CALL";
    /**
     * Manager account has the maximum number of linked accounts.
     *
     * @generated from protobuf enum value: MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS = 4;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS"] = 4] = "MANAGER_HAS_MAX_NUMBER_OF_LINKED_ACCOUNTS";
    /**
     * If no active user on account it cannot be unlinked from its manager.
     *
     * @generated from protobuf enum value: CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER = 5;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER"] = 5] = "CANNOT_UNLINK_ACCOUNT_WITHOUT_ACTIVE_USER";
    /**
     * Account should have at least one active owner on it before being
     * unlinked.
     *
     * @generated from protobuf enum value: CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER = 6;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER"] = 6] = "CANNOT_REMOVE_LAST_CLIENT_ACCOUNT_OWNER";
    /**
     * Only account owners may change their permission role.
     *
     * @generated from protobuf enum value: CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER = 7;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER"] = 7] = "CANNOT_CHANGE_ROLE_BY_NON_ACCOUNT_OWNER";
    /**
     * When a client's link to its manager is not active, the link role cannot
     * be changed.
     *
     * @generated from protobuf enum value: CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT = 8;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT"] = 8] = "CANNOT_CHANGE_ROLE_FOR_NON_ACTIVE_LINK_ACCOUNT";
    /**
     * Attempt to link a child to a parent that contains or will contain
     * duplicate children.
     *
     * @generated from protobuf enum value: DUPLICATE_CHILD_FOUND = 9;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["DUPLICATE_CHILD_FOUND"] = 9] = "DUPLICATE_CHILD_FOUND";
    /**
     * The authorized customer is a test account. It can add no more than the
     * allowed number of accounts
     *
     * @generated from protobuf enum value: TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS = 10;
     */
    CustomerManagerLinkErrorEnum_CustomerManagerLinkError[CustomerManagerLinkErrorEnum_CustomerManagerLinkError["TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS"] = 10] = "TEST_ACCOUNT_LINKS_TOO_MANY_CHILD_ACCOUNTS";
})(CustomerManagerLinkErrorEnum_CustomerManagerLinkError = exports.CustomerManagerLinkErrorEnum_CustomerManagerLinkError || (exports.CustomerManagerLinkErrorEnum_CustomerManagerLinkError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class CustomerManagerLinkErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.CustomerManagerLinkErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.CustomerManagerLinkErrorEnum
 */
exports.CustomerManagerLinkErrorEnum = new CustomerManagerLinkErrorEnum$Type();
//# sourceMappingURL=customer_manager_link_error.js.map