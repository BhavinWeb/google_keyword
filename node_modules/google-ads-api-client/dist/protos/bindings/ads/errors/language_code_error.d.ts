import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing language code errors.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.LanguageCodeErrorEnum
 */
export interface LanguageCodeErrorEnum {
}
/**
 * Enum describing language code errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.LanguageCodeErrorEnum.LanguageCodeError
 */
export declare enum LanguageCodeErrorEnum_LanguageCodeError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The input language code is not recognized.
     *
     * @generated from protobuf enum value: LANGUAGE_CODE_NOT_FOUND = 2;
     */
    LANGUAGE_CODE_NOT_FOUND = 2,
    /**
     * The language code is not supported.
     *
     * @generated from protobuf enum value: INVALID_LANGUAGE_CODE = 3;
     */
    INVALID_LANGUAGE_CODE = 3
}
declare class LanguageCodeErrorEnum$Type extends MessageType<LanguageCodeErrorEnum> {
    constructor();
    create(value?: PartialMessage<LanguageCodeErrorEnum>): LanguageCodeErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanguageCodeErrorEnum): LanguageCodeErrorEnum;
    internalBinaryWrite(message: LanguageCodeErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.LanguageCodeErrorEnum
 */
export declare const LanguageCodeErrorEnum: LanguageCodeErrorEnum$Type;
export {};
