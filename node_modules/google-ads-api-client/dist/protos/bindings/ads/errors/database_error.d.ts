import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing possible database errors.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.DatabaseErrorEnum
 */
export interface DatabaseErrorEnum {
}
/**
 * Enum describing possible database errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.DatabaseErrorEnum.DatabaseError
 */
export declare enum DatabaseErrorEnum_DatabaseError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * Multiple requests were attempting to modify the same resource at once.
     * Retry the request.
     *
     * @generated from protobuf enum value: CONCURRENT_MODIFICATION = 2;
     */
    CONCURRENT_MODIFICATION = 2,
    /**
     * The request conflicted with existing data. This error will usually be
     * replaced with a more specific error if the request is retried.
     *
     * @generated from protobuf enum value: DATA_CONSTRAINT_VIOLATION = 3;
     */
    DATA_CONSTRAINT_VIOLATION = 3,
    /**
     * The data written is too large. Split the request into smaller
     * requests.
     *
     * @generated from protobuf enum value: REQUEST_TOO_LARGE = 4;
     */
    REQUEST_TOO_LARGE = 4
}
declare class DatabaseErrorEnum$Type extends MessageType<DatabaseErrorEnum> {
    constructor();
    create(value?: PartialMessage<DatabaseErrorEnum>): DatabaseErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseErrorEnum): DatabaseErrorEnum;
    internalBinaryWrite(message: DatabaseErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.DatabaseErrorEnum
 */
export declare const DatabaseErrorEnum: DatabaseErrorEnum$Type;
export {};
