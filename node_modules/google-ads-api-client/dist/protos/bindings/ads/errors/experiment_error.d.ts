import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing possible experiment error.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.ExperimentErrorEnum
 */
export interface ExperimentErrorEnum {
}
/**
 * Enum describing possible experiment errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.ExperimentErrorEnum.ExperimentError
 */
export declare enum ExperimentErrorEnum_ExperimentError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The start date of an experiment cannot be set in the past.
     * Use a start date in the future.
     *
     * @generated from protobuf enum value: CANNOT_SET_START_DATE_IN_PAST = 2;
     */
    CANNOT_SET_START_DATE_IN_PAST = 2,
    /**
     * The end date of an experiment is before its start date.
     * Use an end date after the start date.
     *
     * @generated from protobuf enum value: END_DATE_BEFORE_START_DATE = 3;
     */
    END_DATE_BEFORE_START_DATE = 3,
    /**
     * The start date of an experiment is too far in the future.
     * Use a start date no more than 1 year in the future.
     *
     * @generated from protobuf enum value: START_DATE_TOO_FAR_IN_FUTURE = 4;
     */
    START_DATE_TOO_FAR_IN_FUTURE = 4,
    /**
     * The experiment has the same name as an existing active experiment.
     *
     * @generated from protobuf enum value: DUPLICATE_EXPERIMENT_NAME = 5;
     */
    DUPLICATE_EXPERIMENT_NAME = 5,
    /**
     * Experiments can only be modified when they are ENABLED.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_REMOVED_EXPERIMENT = 6;
     */
    CANNOT_MODIFY_REMOVED_EXPERIMENT = 6,
    /**
     * The start date of an experiment cannot be modified if the existing start
     * date has already passed.
     *
     * @generated from protobuf enum value: START_DATE_ALREADY_PASSED = 7;
     */
    START_DATE_ALREADY_PASSED = 7,
    /**
     * The end date of an experiment cannot be set in the past.
     *
     * @generated from protobuf enum value: CANNOT_SET_END_DATE_IN_PAST = 8;
     */
    CANNOT_SET_END_DATE_IN_PAST = 8,
    /**
     * The status of an experiment cannot be set to REMOVED.
     *
     * @generated from protobuf enum value: CANNOT_SET_STATUS_TO_REMOVED = 9;
     */
    CANNOT_SET_STATUS_TO_REMOVED = 9,
    /**
     * The end date of an expired experiment cannot be modified.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_PAST_END_DATE = 10;
     */
    CANNOT_MODIFY_PAST_END_DATE = 10,
    /**
     * The status is invalid.
     *
     * @generated from protobuf enum value: INVALID_STATUS = 11;
     */
    INVALID_STATUS = 11,
    /**
     * Experiment arm contains campaigns with invalid advertising channel type.
     *
     * @generated from protobuf enum value: INVALID_CAMPAIGN_CHANNEL_TYPE = 12;
     */
    INVALID_CAMPAIGN_CHANNEL_TYPE = 12,
    /**
     * A pair of trials share members and have overlapping date ranges.
     *
     * @generated from protobuf enum value: OVERLAPPING_MEMBERS_AND_DATE_RANGE = 13;
     */
    OVERLAPPING_MEMBERS_AND_DATE_RANGE = 13,
    /**
     * Experiment arm contains invalid traffic split.
     *
     * @generated from protobuf enum value: INVALID_TRIAL_ARM_TRAFFIC_SPLIT = 14;
     */
    INVALID_TRIAL_ARM_TRAFFIC_SPLIT = 14,
    /**
     * Experiment contains trial arms with overlapping traffic split.
     *
     * @generated from protobuf enum value: TRAFFIC_SPLIT_OVERLAPPING = 15;
     */
    TRAFFIC_SPLIT_OVERLAPPING = 15,
    /**
     * The total traffic split of trial arms is not equal to 100.
     *
     * @generated from protobuf enum value: SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR = 16;
     */
    SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR = 16,
    /**
     * Traffic split related settings (like traffic share bounds) can't be
     * modified after the experiment has started.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START = 17;
     */
    CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START = 17,
    /**
     * The experiment could not be found.
     *
     * @generated from protobuf enum value: EXPERIMENT_NOT_FOUND = 18;
     */
    EXPERIMENT_NOT_FOUND = 18,
    /**
     * Experiment has not begun.
     *
     * @generated from protobuf enum value: EXPERIMENT_NOT_YET_STARTED = 19;
     */
    EXPERIMENT_NOT_YET_STARTED = 19,
    /**
     * The experiment cannot have more than one control arm.
     *
     * @generated from protobuf enum value: CANNOT_HAVE_MULTIPLE_CONTROL_ARMS = 20;
     */
    CANNOT_HAVE_MULTIPLE_CONTROL_ARMS = 20,
    /**
     * The experiment doesn't set in-design campaigns.
     *
     * @generated from protobuf enum value: IN_DESIGN_CAMPAIGNS_NOT_SET = 21;
     */
    IN_DESIGN_CAMPAIGNS_NOT_SET = 21,
    /**
     * Clients must use the graduate action to graduate experiments and cannot
     * set the status to GRADUATED directly.
     *
     * @generated from protobuf enum value: CANNOT_SET_STATUS_TO_GRADUATED = 22;
     */
    CANNOT_SET_STATUS_TO_GRADUATED = 22,
    /**
     * Cannot use shared budget on base campaign when scheduling an experiment.
     *
     * @generated from protobuf enum value: CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET = 23;
     */
    CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET = 23,
    /**
     * Cannot use custom budget on base campaign when scheduling an experiment.
     *
     * @generated from protobuf enum value: CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET = 24;
     */
    CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET = 24,
    /**
     * Invalid status transition.
     *
     * @generated from protobuf enum value: STATUS_TRANSITION_INVALID = 25;
     */
    STATUS_TRANSITION_INVALID = 25
}
declare class ExperimentErrorEnum$Type extends MessageType<ExperimentErrorEnum> {
    constructor();
    create(value?: PartialMessage<ExperimentErrorEnum>): ExperimentErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentErrorEnum): ExperimentErrorEnum;
    internalBinaryWrite(message: ExperimentErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.ExperimentErrorEnum
 */
export declare const ExperimentErrorEnum: ExperimentErrorEnum$Type;
export {};
