"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetGroupListingGroupFilterErrorEnum = exports.AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible asset group listing group filter errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.AssetGroupListingGroupFilterErrorEnum.AssetGroupListingGroupFilterError
 */
var AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError;
(function (AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError) {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * Listing group tree is too deep.
     *
     * @generated from protobuf enum value: TREE_TOO_DEEP = 2;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["TREE_TOO_DEEP"] = 2] = "TREE_TOO_DEEP";
    /**
     * Listing Group UNIT node cannot have children.
     *
     * @generated from protobuf enum value: UNIT_CANNOT_HAVE_CHILDREN = 3;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["UNIT_CANNOT_HAVE_CHILDREN"] = 3] = "UNIT_CANNOT_HAVE_CHILDREN";
    /**
     * Listing Group SUBDIVISION node must have everything else child.
     *
     * @generated from protobuf enum value: SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD = 4;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD"] = 4] = "SUBDIVISION_MUST_HAVE_EVERYTHING_ELSE_CHILD";
    /**
     * Dimension type of Listing Group must be the same as that of its siblings.
     *
     * @generated from protobuf enum value: DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS = 5;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS"] = 5] = "DIFFERENT_DIMENSION_TYPE_BETWEEN_SIBLINGS";
    /**
     * The sibling Listing Groups target exactly the same dimension value.
     *
     * @generated from protobuf enum value: SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS = 6;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS"] = 6] = "SAME_DIMENSION_VALUE_BETWEEN_SIBLINGS";
    /**
     * The dimension type is the same as one of the ancestor Listing Groups.
     *
     * @generated from protobuf enum value: SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS = 7;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS"] = 7] = "SAME_DIMENSION_TYPE_BETWEEN_ANCESTORS";
    /**
     * Each Listing Group tree must have a single root.
     *
     * @generated from protobuf enum value: MULTIPLE_ROOTS = 8;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["MULTIPLE_ROOTS"] = 8] = "MULTIPLE_ROOTS";
    /**
     * Invalid Listing Group dimension value.
     *
     * @generated from protobuf enum value: INVALID_DIMENSION_VALUE = 9;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["INVALID_DIMENSION_VALUE"] = 9] = "INVALID_DIMENSION_VALUE";
    /**
     * Hierarchical dimension must refine a dimension of the same type.
     *
     * @generated from protobuf enum value: MUST_REFINE_HIERARCHICAL_PARENT_TYPE = 10;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["MUST_REFINE_HIERARCHICAL_PARENT_TYPE"] = 10] = "MUST_REFINE_HIERARCHICAL_PARENT_TYPE";
    /**
     * Invalid Product Bidding Category.
     *
     * @generated from protobuf enum value: INVALID_PRODUCT_BIDDING_CATEGORY = 11;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["INVALID_PRODUCT_BIDDING_CATEGORY"] = 11] = "INVALID_PRODUCT_BIDDING_CATEGORY";
    /**
     * Modifying case value is allowed only while updating the entire subtree at
     * the same time.
     *
     * @generated from protobuf enum value: CHANGING_CASE_VALUE_WITH_CHILDREN = 12;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["CHANGING_CASE_VALUE_WITH_CHILDREN"] = 12] = "CHANGING_CASE_VALUE_WITH_CHILDREN";
    /**
     * Subdivision node has children which must be removed first.
     *
     * @generated from protobuf enum value: SUBDIVISION_HAS_CHILDREN = 13;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["SUBDIVISION_HAS_CHILDREN"] = 13] = "SUBDIVISION_HAS_CHILDREN";
    /**
     * Dimension can't subdivide everything-else node in its own hierarchy.
     *
     * @generated from protobuf enum value: CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE = 14;
     */
    AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError[AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError["CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE"] = 14] = "CANNOT_REFINE_HIERARCHICAL_EVERYTHING_ELSE";
})(AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = exports.AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError || (exports.AssetGroupListingGroupFilterErrorEnum_AssetGroupListingGroupFilterError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class AssetGroupListingGroupFilterErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.AssetGroupListingGroupFilterErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.AssetGroupListingGroupFilterErrorEnum
 */
exports.AssetGroupListingGroupFilterErrorEnum = new AssetGroupListingGroupFilterErrorEnum$Type();
//# sourceMappingURL=asset_group_listing_group_filter_error.js.map