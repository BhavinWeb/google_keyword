import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing possible list operation errors.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.ListOperationErrorEnum
 */
export interface ListOperationErrorEnum {
}
/**
 * Enum describing possible list operation errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.ListOperationErrorEnum.ListOperationError
 */
export declare enum ListOperationErrorEnum_ListOperationError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * Field required in value is missing.
     *
     * @generated from protobuf enum value: REQUIRED_FIELD_MISSING = 7;
     */
    REQUIRED_FIELD_MISSING = 7,
    /**
     * Duplicate or identical value is sent in multiple list operations.
     *
     * @generated from protobuf enum value: DUPLICATE_VALUES = 8;
     */
    DUPLICATE_VALUES = 8
}
declare class ListOperationErrorEnum$Type extends MessageType<ListOperationErrorEnum> {
    constructor();
    create(value?: PartialMessage<ListOperationErrorEnum>): ListOperationErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListOperationErrorEnum): ListOperationErrorEnum;
    internalBinaryWrite(message: ListOperationErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.ListOperationErrorEnum
 */
export declare const ListOperationErrorEnum: ListOperationErrorEnum$Type;
export {};
