import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing possible field mask errors.
 *
 * @generated from protobuf message google.ads.googleads.v11.errors.FieldMaskErrorEnum
 */
export interface FieldMaskErrorEnum {
}
/**
 * Enum describing possible field mask errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.FieldMaskErrorEnum.FieldMaskError
 */
export declare enum FieldMaskErrorEnum_FieldMaskError {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The field mask must be provided for update operations.
     *
     * @generated from protobuf enum value: FIELD_MASK_MISSING = 5;
     */
    FIELD_MASK_MISSING = 5,
    /**
     * The field mask must be empty for create and remove operations.
     *
     * @generated from protobuf enum value: FIELD_MASK_NOT_ALLOWED = 4;
     */
    FIELD_MASK_NOT_ALLOWED = 4,
    /**
     * The field mask contained an invalid field.
     *
     * @generated from protobuf enum value: FIELD_NOT_FOUND = 2;
     */
    FIELD_NOT_FOUND = 2,
    /**
     * The field mask updated a field with subfields. Fields with subfields may
     * be cleared, but not updated. To fix this, the field mask should select
     * all the subfields of the invalid field.
     *
     * @generated from protobuf enum value: FIELD_HAS_SUBFIELDS = 3;
     */
    FIELD_HAS_SUBFIELDS = 3
}
declare class FieldMaskErrorEnum$Type extends MessageType<FieldMaskErrorEnum> {
    constructor();
    create(value?: PartialMessage<FieldMaskErrorEnum>): FieldMaskErrorEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldMaskErrorEnum): FieldMaskErrorEnum;
    internalBinaryWrite(message: FieldMaskErrorEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.FieldMaskErrorEnum
 */
export declare const FieldMaskErrorEnum: FieldMaskErrorEnum$Type;
export {};
