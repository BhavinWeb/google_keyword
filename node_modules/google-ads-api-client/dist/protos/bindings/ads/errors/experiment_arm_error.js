"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentArmErrorEnum = exports.ExperimentArmErrorEnum_ExperimentArmError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible experiment arm errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.ExperimentArmErrorEnum.ExperimentArmError
 */
var ExperimentArmErrorEnum_ExperimentArmError;
(function (ExperimentArmErrorEnum_ExperimentArmError) {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * Number of experiment arms is above limit.
     *
     * @generated from protobuf enum value: EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED = 2;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED"] = 2] = "EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED";
    /**
     * Cannot add campaign with invalid status to the experiment arm.
     *
     * @generated from protobuf enum value: INVALID_CAMPAIGN_STATUS = 3;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["INVALID_CAMPAIGN_STATUS"] = 3] = "INVALID_CAMPAIGN_STATUS";
    /**
     * Cannot add duplicate experiment arm name in one experiment.
     *
     * @generated from protobuf enum value: DUPLICATE_EXPERIMENT_ARM_NAME = 4;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["DUPLICATE_EXPERIMENT_ARM_NAME"] = 4] = "DUPLICATE_EXPERIMENT_ARM_NAME";
    /**
     * Cannot set campaigns of treatment experiment arm.
     *
     * @generated from protobuf enum value: CANNOT_SET_TREATMENT_ARM_CAMPAIGN = 5;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_SET_TREATMENT_ARM_CAMPAIGN"] = 5] = "CANNOT_SET_TREATMENT_ARM_CAMPAIGN";
    /**
     * Cannot edit campaign ids in trial arms in non SETUP experiment.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_CAMPAIGN_IDS = 6;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_MODIFY_CAMPAIGN_IDS"] = 6] = "CANNOT_MODIFY_CAMPAIGN_IDS";
    /**
     * Cannot modify the campaigns in the control arm
     * if there is not a suffix set in the trial.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET = 7;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET"] = 7] = "CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET";
    /**
     * Traffic split related settings (like traffic share bounds) can't be
     * modified after the trial has started.
     *
     * @generated from protobuf enum value: CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START = 8;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START"] = 8] = "CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START";
    /**
     * Cannot use shared budget on experiment's control campaign.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET = 9;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET"] = 9] = "CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET";
    /**
     * Cannot use custom budget on experiment's control campaigns.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET = 10;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET"] = 10] = "CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET";
    /**
     * Cannot have enable_dynamic_assets turned on in experiment's campaigns.
     *
     * @generated from protobuf enum value: CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED = 11;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED"] = 11] = "CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED";
    /**
     * Cannot use campaign's advertising channel sub type in experiment.
     *
     * @generated from protobuf enum value: UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE = 12;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE"] = 12] = "UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE";
    /**
     * Experiment date range must be within base campaign's date range.
     *
     * @generated from protobuf enum value: CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE = 13;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE"] = 13] = "CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE";
    /**
     * Bidding strategy is not supported in experiments.
     *
     * @generated from protobuf enum value: BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS = 14;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS"] = 14] = "BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS";
    /**
     * Traffic split is not supported for some channel types.
     *
     * @generated from protobuf enum value: TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE = 15;
     */
    ExperimentArmErrorEnum_ExperimentArmError[ExperimentArmErrorEnum_ExperimentArmError["TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE"] = 15] = "TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE";
})(ExperimentArmErrorEnum_ExperimentArmError = exports.ExperimentArmErrorEnum_ExperimentArmError || (exports.ExperimentArmErrorEnum_ExperimentArmError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentArmErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.ExperimentArmErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.ExperimentArmErrorEnum
 */
exports.ExperimentArmErrorEnum = new ExperimentArmErrorEnum$Type();
//# sourceMappingURL=experiment_arm_error.js.map