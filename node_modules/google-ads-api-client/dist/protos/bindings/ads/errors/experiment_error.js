"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentErrorEnum = exports.ExperimentErrorEnum_ExperimentError = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * Enum describing possible experiment errors.
 *
 * @generated from protobuf enum google.ads.googleads.v11.errors.ExperimentErrorEnum.ExperimentError
 */
var ExperimentErrorEnum_ExperimentError;
(function (ExperimentErrorEnum_ExperimentError) {
    /**
     * Enum unspecified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * The start date of an experiment cannot be set in the past.
     * Use a start date in the future.
     *
     * @generated from protobuf enum value: CANNOT_SET_START_DATE_IN_PAST = 2;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_SET_START_DATE_IN_PAST"] = 2] = "CANNOT_SET_START_DATE_IN_PAST";
    /**
     * The end date of an experiment is before its start date.
     * Use an end date after the start date.
     *
     * @generated from protobuf enum value: END_DATE_BEFORE_START_DATE = 3;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["END_DATE_BEFORE_START_DATE"] = 3] = "END_DATE_BEFORE_START_DATE";
    /**
     * The start date of an experiment is too far in the future.
     * Use a start date no more than 1 year in the future.
     *
     * @generated from protobuf enum value: START_DATE_TOO_FAR_IN_FUTURE = 4;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["START_DATE_TOO_FAR_IN_FUTURE"] = 4] = "START_DATE_TOO_FAR_IN_FUTURE";
    /**
     * The experiment has the same name as an existing active experiment.
     *
     * @generated from protobuf enum value: DUPLICATE_EXPERIMENT_NAME = 5;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["DUPLICATE_EXPERIMENT_NAME"] = 5] = "DUPLICATE_EXPERIMENT_NAME";
    /**
     * Experiments can only be modified when they are ENABLED.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_REMOVED_EXPERIMENT = 6;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_MODIFY_REMOVED_EXPERIMENT"] = 6] = "CANNOT_MODIFY_REMOVED_EXPERIMENT";
    /**
     * The start date of an experiment cannot be modified if the existing start
     * date has already passed.
     *
     * @generated from protobuf enum value: START_DATE_ALREADY_PASSED = 7;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["START_DATE_ALREADY_PASSED"] = 7] = "START_DATE_ALREADY_PASSED";
    /**
     * The end date of an experiment cannot be set in the past.
     *
     * @generated from protobuf enum value: CANNOT_SET_END_DATE_IN_PAST = 8;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_SET_END_DATE_IN_PAST"] = 8] = "CANNOT_SET_END_DATE_IN_PAST";
    /**
     * The status of an experiment cannot be set to REMOVED.
     *
     * @generated from protobuf enum value: CANNOT_SET_STATUS_TO_REMOVED = 9;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_SET_STATUS_TO_REMOVED"] = 9] = "CANNOT_SET_STATUS_TO_REMOVED";
    /**
     * The end date of an expired experiment cannot be modified.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_PAST_END_DATE = 10;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_MODIFY_PAST_END_DATE"] = 10] = "CANNOT_MODIFY_PAST_END_DATE";
    /**
     * The status is invalid.
     *
     * @generated from protobuf enum value: INVALID_STATUS = 11;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["INVALID_STATUS"] = 11] = "INVALID_STATUS";
    /**
     * Experiment arm contains campaigns with invalid advertising channel type.
     *
     * @generated from protobuf enum value: INVALID_CAMPAIGN_CHANNEL_TYPE = 12;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["INVALID_CAMPAIGN_CHANNEL_TYPE"] = 12] = "INVALID_CAMPAIGN_CHANNEL_TYPE";
    /**
     * A pair of trials share members and have overlapping date ranges.
     *
     * @generated from protobuf enum value: OVERLAPPING_MEMBERS_AND_DATE_RANGE = 13;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["OVERLAPPING_MEMBERS_AND_DATE_RANGE"] = 13] = "OVERLAPPING_MEMBERS_AND_DATE_RANGE";
    /**
     * Experiment arm contains invalid traffic split.
     *
     * @generated from protobuf enum value: INVALID_TRIAL_ARM_TRAFFIC_SPLIT = 14;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["INVALID_TRIAL_ARM_TRAFFIC_SPLIT"] = 14] = "INVALID_TRIAL_ARM_TRAFFIC_SPLIT";
    /**
     * Experiment contains trial arms with overlapping traffic split.
     *
     * @generated from protobuf enum value: TRAFFIC_SPLIT_OVERLAPPING = 15;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["TRAFFIC_SPLIT_OVERLAPPING"] = 15] = "TRAFFIC_SPLIT_OVERLAPPING";
    /**
     * The total traffic split of trial arms is not equal to 100.
     *
     * @generated from protobuf enum value: SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR = 16;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR"] = 16] = "SUM_TRIAL_ARM_TRAFFIC_UNEQUALS_TO_TRIAL_TRAFFIC_SPLIT_DENOMINATOR";
    /**
     * Traffic split related settings (like traffic share bounds) can't be
     * modified after the experiment has started.
     *
     * @generated from protobuf enum value: CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START = 17;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START"] = 17] = "CANNOT_MODIFY_TRAFFIC_SPLIT_AFTER_START";
    /**
     * The experiment could not be found.
     *
     * @generated from protobuf enum value: EXPERIMENT_NOT_FOUND = 18;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["EXPERIMENT_NOT_FOUND"] = 18] = "EXPERIMENT_NOT_FOUND";
    /**
     * Experiment has not begun.
     *
     * @generated from protobuf enum value: EXPERIMENT_NOT_YET_STARTED = 19;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["EXPERIMENT_NOT_YET_STARTED"] = 19] = "EXPERIMENT_NOT_YET_STARTED";
    /**
     * The experiment cannot have more than one control arm.
     *
     * @generated from protobuf enum value: CANNOT_HAVE_MULTIPLE_CONTROL_ARMS = 20;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_HAVE_MULTIPLE_CONTROL_ARMS"] = 20] = "CANNOT_HAVE_MULTIPLE_CONTROL_ARMS";
    /**
     * The experiment doesn't set in-design campaigns.
     *
     * @generated from protobuf enum value: IN_DESIGN_CAMPAIGNS_NOT_SET = 21;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["IN_DESIGN_CAMPAIGNS_NOT_SET"] = 21] = "IN_DESIGN_CAMPAIGNS_NOT_SET";
    /**
     * Clients must use the graduate action to graduate experiments and cannot
     * set the status to GRADUATED directly.
     *
     * @generated from protobuf enum value: CANNOT_SET_STATUS_TO_GRADUATED = 22;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_SET_STATUS_TO_GRADUATED"] = 22] = "CANNOT_SET_STATUS_TO_GRADUATED";
    /**
     * Cannot use shared budget on base campaign when scheduling an experiment.
     *
     * @generated from protobuf enum value: CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET = 23;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET"] = 23] = "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_SHARED_BUDGET";
    /**
     * Cannot use custom budget on base campaign when scheduling an experiment.
     *
     * @generated from protobuf enum value: CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET = 24;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET"] = 24] = "CANNOT_CREATE_EXPERIMENT_CAMPAIGN_WITH_CUSTOM_BUDGET";
    /**
     * Invalid status transition.
     *
     * @generated from protobuf enum value: STATUS_TRANSITION_INVALID = 25;
     */
    ExperimentErrorEnum_ExperimentError[ExperimentErrorEnum_ExperimentError["STATUS_TRANSITION_INVALID"] = 25] = "STATUS_TRANSITION_INVALID";
})(ExperimentErrorEnum_ExperimentError = exports.ExperimentErrorEnum_ExperimentError || (exports.ExperimentErrorEnum_ExperimentError = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentErrorEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.errors.ExperimentErrorEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.errors.ExperimentErrorEnum
 */
exports.ExperimentErrorEnum = new ExperimentErrorEnum$Type();
//# sourceMappingURL=experiment_error.js.map