"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentStatusEnum = exports.ExperimentStatusEnum_ExperimentStatus = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * The status of the experiment.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.ExperimentStatusEnum.ExperimentStatus
 */
var ExperimentStatusEnum_ExperimentStatus;
(function (ExperimentStatusEnum_ExperimentStatus) {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The value is unknown in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * The experiment is enabled.
     *
     * @generated from protobuf enum value: ENABLED = 2;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["ENABLED"] = 2] = "ENABLED";
    /**
     * The experiment has been removed.
     *
     * @generated from protobuf enum value: REMOVED = 3;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["REMOVED"] = 3] = "REMOVED";
    /**
     * The experiment has been halted.
     * This status can be set from ENABLED status through API.
     *
     * @generated from protobuf enum value: HALTED = 4;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["HALTED"] = 4] = "HALTED";
    /**
     * The experiment will be promoted out of experimental status.
     *
     * @generated from protobuf enum value: PROMOTED = 5;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["PROMOTED"] = 5] = "PROMOTED";
    /**
     * Initial status of the experiment.
     *
     * @generated from protobuf enum value: SETUP = 6;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["SETUP"] = 6] = "SETUP";
    /**
     * The experiment's campaigns are pending materialization.
     * This status can be set from SETUP status through API.
     *
     * @generated from protobuf enum value: INITIATED = 7;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["INITIATED"] = 7] = "INITIATED";
    /**
     * The experiment has been graduated.
     *
     * @generated from protobuf enum value: GRADUATED = 8;
     */
    ExperimentStatusEnum_ExperimentStatus[ExperimentStatusEnum_ExperimentStatus["GRADUATED"] = 8] = "GRADUATED";
})(ExperimentStatusEnum_ExperimentStatus = exports.ExperimentStatusEnum_ExperimentStatus || (exports.ExperimentStatusEnum_ExperimentStatus = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentStatusEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.enums.ExperimentStatusEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.ExperimentStatusEnum
 */
exports.ExperimentStatusEnum = new ExperimentStatusEnum$Type();
//# sourceMappingURL=experiment_status.js.map