"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentMetricDirectionEnum = exports.ExperimentMetricDirectionEnum_ExperimentMetricDirection = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * The type of experiment metric direction.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum.ExperimentMetricDirection
 */
var ExperimentMetricDirectionEnum_ExperimentMetricDirection;
(function (ExperimentMetricDirectionEnum_ExperimentMetricDirection) {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The value is unknown in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * The goal of the experiment is to not change the metric.
     *
     * @generated from protobuf enum value: NO_CHANGE = 2;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["NO_CHANGE"] = 2] = "NO_CHANGE";
    /**
     * The goal of the experiment is to increate the metric.
     *
     * @generated from protobuf enum value: INCREASE = 3;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["INCREASE"] = 3] = "INCREASE";
    /**
     * The goal of the experiment is to decrease the metric.
     *
     * @generated from protobuf enum value: DECREASE = 4;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["DECREASE"] = 4] = "DECREASE";
    /**
     * The goal of the experiment is to either not change or increase the
     * metric.
     *
     * @generated from protobuf enum value: NO_CHANGE_OR_INCREASE = 5;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["NO_CHANGE_OR_INCREASE"] = 5] = "NO_CHANGE_OR_INCREASE";
    /**
     * The goal of the experiment is to either not change or decrease the
     * metric.
     *
     * @generated from protobuf enum value: NO_CHANGE_OR_DECREASE = 6;
     */
    ExperimentMetricDirectionEnum_ExperimentMetricDirection[ExperimentMetricDirectionEnum_ExperimentMetricDirection["NO_CHANGE_OR_DECREASE"] = 6] = "NO_CHANGE_OR_DECREASE";
})(ExperimentMetricDirectionEnum_ExperimentMetricDirection = exports.ExperimentMetricDirectionEnum_ExperimentMetricDirection || (exports.ExperimentMetricDirectionEnum_ExperimentMetricDirection = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentMetricDirectionEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.ExperimentMetricDirectionEnum
 */
exports.ExperimentMetricDirectionEnum = new ExperimentMetricDirectionEnum$Type();
//# sourceMappingURL=experiment_metric_direction.js.map