import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message describing Budget period.
 *
 * @generated from protobuf message google.ads.googleads.v11.enums.BudgetPeriodEnum
 */
export interface BudgetPeriodEnum {
}
/**
 * Possible period of a Budget.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.BudgetPeriodEnum.BudgetPeriod
 */
export declare enum BudgetPeriodEnum_BudgetPeriod {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Used for return value only. Represents value unknown in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * Daily budget.
     *
     * @generated from protobuf enum value: DAILY = 2;
     */
    DAILY = 2,
    /**
     * Custom budget, added back in V5.
     * Custom bugdet can be used with total_amount to specify lifetime budget
     * limit. See: https://support.google.com/google-ads/answer/6385083 for more
     * info.
     *
     * @generated from protobuf enum value: CUSTOM_PERIOD = 5;
     */
    CUSTOM_PERIOD = 5
}
declare class BudgetPeriodEnum$Type extends MessageType<BudgetPeriodEnum> {
    constructor();
    create(value?: PartialMessage<BudgetPeriodEnum>): BudgetPeriodEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BudgetPeriodEnum): BudgetPeriodEnum;
    internalBinaryWrite(message: BudgetPeriodEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.BudgetPeriodEnum
 */
export declare const BudgetPeriodEnum: BudgetPeriodEnum$Type;
export {};
