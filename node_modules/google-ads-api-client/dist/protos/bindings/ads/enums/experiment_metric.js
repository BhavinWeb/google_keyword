"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentMetricEnum = exports.ExperimentMetricEnum_ExperimentMetric = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
/**
 * The type of experiment metric.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.ExperimentMetricEnum.ExperimentMetric
 */
var ExperimentMetricEnum_ExperimentMetric;
(function (ExperimentMetricEnum_ExperimentMetric) {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The value is unknown in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["UNKNOWN"] = 1] = "UNKNOWN";
    /**
     * The goal of the experiment is clicks.
     *
     * @generated from protobuf enum value: CLICKS = 2;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CLICKS"] = 2] = "CLICKS";
    /**
     * The goal of the experiment is impressions.
     *
     * @generated from protobuf enum value: IMPRESSIONS = 3;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["IMPRESSIONS"] = 3] = "IMPRESSIONS";
    /**
     * The goal of the experiment is cost.
     *
     * @generated from protobuf enum value: COST = 4;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["COST"] = 4] = "COST";
    /**
     * The goal of the experiment is conversion rate.
     *
     * @generated from protobuf enum value: CONVERSIONS_PER_INTERACTION_RATE = 5;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CONVERSIONS_PER_INTERACTION_RATE"] = 5] = "CONVERSIONS_PER_INTERACTION_RATE";
    /**
     * The goal of the experiment is cost per conversion.
     *
     * @generated from protobuf enum value: COST_PER_CONVERSION = 6;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["COST_PER_CONVERSION"] = 6] = "COST_PER_CONVERSION";
    /**
     * The goal of the experiment is conversion value per cost.
     *
     * @generated from protobuf enum value: CONVERSIONS_VALUE_PER_COST = 7;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CONVERSIONS_VALUE_PER_COST"] = 7] = "CONVERSIONS_VALUE_PER_COST";
    /**
     * The goal of the experiment is avg cpc.
     *
     * @generated from protobuf enum value: AVERAGE_CPC = 8;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["AVERAGE_CPC"] = 8] = "AVERAGE_CPC";
    /**
     * The goal of the experiment is ctr.
     *
     * @generated from protobuf enum value: CTR = 9;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CTR"] = 9] = "CTR";
    /**
     * The goal of the experiment is incremental conversions.
     *
     * @generated from protobuf enum value: INCREMENTAL_CONVERSIONS = 10;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["INCREMENTAL_CONVERSIONS"] = 10] = "INCREMENTAL_CONVERSIONS";
    /**
     * The goal of the experiment is completed video views.
     *
     * @generated from protobuf enum value: COMPLETED_VIDEO_VIEWS = 11;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["COMPLETED_VIDEO_VIEWS"] = 11] = "COMPLETED_VIDEO_VIEWS";
    /**
     * The goal of the experiment is custom algorithms.
     *
     * @generated from protobuf enum value: CUSTOM_ALGORITHMS = 12;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CUSTOM_ALGORITHMS"] = 12] = "CUSTOM_ALGORITHMS";
    /**
     * The goal of the experiment is conversions.
     *
     * @generated from protobuf enum value: CONVERSIONS = 13;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CONVERSIONS"] = 13] = "CONVERSIONS";
    /**
     * The goal of the experiment is conversion value.
     *
     * @generated from protobuf enum value: CONVERSION_VALUE = 14;
     */
    ExperimentMetricEnum_ExperimentMetric[ExperimentMetricEnum_ExperimentMetric["CONVERSION_VALUE"] = 14] = "CONVERSION_VALUE";
})(ExperimentMetricEnum_ExperimentMetric = exports.ExperimentMetricEnum_ExperimentMetric || (exports.ExperimentMetricEnum_ExperimentMetric = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentMetricEnum$Type extends runtime_4.MessageType {
    constructor() {
        super("google.ads.googleads.v11.enums.ExperimentMetricEnum", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_3.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_2.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_1.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.ExperimentMetricEnum
 */
exports.ExperimentMetricEnum = new ExperimentMetricEnum$Type();
//# sourceMappingURL=experiment_metric.js.map