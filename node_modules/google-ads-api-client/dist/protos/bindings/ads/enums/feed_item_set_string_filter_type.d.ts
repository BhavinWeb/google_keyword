import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * The type of string matching to be used for a dynamic FeedItemSet filter.
 *
 * @generated from protobuf message google.ads.googleads.v11.enums.FeedItemSetStringFilterTypeEnum
 */
export interface FeedItemSetStringFilterTypeEnum {
}
/**
 * describe the possible types for a FeedItemSetStringFilter.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.FeedItemSetStringFilterTypeEnum.FeedItemSetStringFilterType
 */
export declare enum FeedItemSetStringFilterTypeEnum_FeedItemSetStringFilterType {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The received error code is not known in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * The dynamic set filter will use exact string matching.
     *
     * @generated from protobuf enum value: EXACT = 2;
     */
    EXACT = 2
}
declare class FeedItemSetStringFilterTypeEnum$Type extends MessageType<FeedItemSetStringFilterTypeEnum> {
    constructor();
    create(value?: PartialMessage<FeedItemSetStringFilterTypeEnum>): FeedItemSetStringFilterTypeEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeedItemSetStringFilterTypeEnum): FeedItemSetStringFilterTypeEnum;
    internalBinaryWrite(message: FeedItemSetStringFilterTypeEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.FeedItemSetStringFilterTypeEnum
 */
export declare const FeedItemSetStringFilterTypeEnum: FeedItemSetStringFilterTypeEnum$Type;
export {};
