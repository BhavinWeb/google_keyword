import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Container for enum describing the type of the vertical a listing group filter
 * tree represents.
 *
 * @generated from protobuf message google.ads.googleads.v11.enums.ListingGroupFilterVerticalEnum
 */
export interface ListingGroupFilterVerticalEnum {
}
/**
 * The type of the listing group filter vertical.
 *
 * @generated from protobuf enum google.ads.googleads.v11.enums.ListingGroupFilterVerticalEnum.ListingGroupFilterVertical
 */
export declare enum ListingGroupFilterVerticalEnum_ListingGroupFilterVertical {
    /**
     * Not specified.
     *
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Used for return value only. Represents value unknown in this version.
     *
     * @generated from protobuf enum value: UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * Represents the shopping vertical.
     *
     * @generated from protobuf enum value: SHOPPING = 2;
     */
    SHOPPING = 2
}
declare class ListingGroupFilterVerticalEnum$Type extends MessageType<ListingGroupFilterVerticalEnum> {
    constructor();
    create(value?: PartialMessage<ListingGroupFilterVerticalEnum>): ListingGroupFilterVerticalEnum;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListingGroupFilterVerticalEnum): ListingGroupFilterVerticalEnum;
    internalBinaryWrite(message: ListingGroupFilterVerticalEnum, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.enums.ListingGroupFilterVerticalEnum
 */
export declare const ListingGroupFilterVerticalEnum: ListingGroupFilterVerticalEnum$Type;
export {};
