"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendationServiceClient = void 0;
const recommendation_service_1 = require("./recommendation_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Recommendation service.
/**
 * Service to manage recommendations.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.RecommendationService
 */
class RecommendationServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = recommendation_service_1.RecommendationService.typeName;
        this.methods = recommendation_service_1.RecommendationService.methods;
        this.options = recommendation_service_1.RecommendationService.options;
    }
    /**
     * Applies given recommendations with corresponding apply parameters.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RecommendationError]()
     *   [RequestError]()
     *   [UrlFieldError]()
     *
     * @generated from protobuf rpc: ApplyRecommendation(google.ads.googleads.v11.services.ApplyRecommendationRequest) returns (google.ads.googleads.v11.services.ApplyRecommendationResponse);
     */
    applyRecommendation(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Dismisses given recommendations.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RecommendationError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: DismissRecommendation(google.ads.googleads.v11.services.DismissRecommendationRequest) returns (google.ads.googleads.v11.services.DismissRecommendationResponse);
     */
    dismissRecommendation(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.RecommendationServiceClient = RecommendationServiceClient;
//# sourceMappingURL=recommendation_service.client.js.map