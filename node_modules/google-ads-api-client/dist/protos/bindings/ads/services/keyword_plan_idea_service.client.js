"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordPlanIdeaServiceClient = void 0;
const keyword_plan_idea_service_1 = require("./keyword_plan_idea_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the keyword plan idea service.
/**
 * Service to generate keyword ideas.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.KeywordPlanIdeaService
 */
class KeywordPlanIdeaServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = keyword_plan_idea_service_1.KeywordPlanIdeaService.typeName;
        this.methods = keyword_plan_idea_service_1.KeywordPlanIdeaService.methods;
        this.options = keyword_plan_idea_service_1.KeywordPlanIdeaService.options;
    }
    /**
     * Returns a list of keyword ideas.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanIdeaError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateKeywordIdeas(google.ads.googleads.v11.services.GenerateKeywordIdeasRequest) returns (google.ads.googleads.v11.services.GenerateKeywordIdeaResponse);
     */
    generateKeywordIdeas(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a list of keyword historical metrics.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateKeywordHistoricalMetrics(google.ads.googleads.v11.services.GenerateKeywordHistoricalMetricsRequest) returns (google.ads.googleads.v11.services.GenerateKeywordHistoricalMetricsResponse);
     */
    generateKeywordHistoricalMetrics(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a list of suggested AdGroups and suggested modifications
     * (text, match type) for the given keywords.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateAdGroupThemes(google.ads.googleads.v11.services.GenerateAdGroupThemesRequest) returns (google.ads.googleads.v11.services.GenerateAdGroupThemesResponse);
     */
    generateAdGroupThemes(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.KeywordPlanIdeaServiceClient = KeywordPlanIdeaServiceClient;
//# sourceMappingURL=keyword_plan_idea_service.client.js.map