"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionAdjustmentUploadServiceClient = void 0;
const conversion_adjustment_upload_service_1 = require("./conversion_adjustment_upload_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Service to upload conversion adjustments.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.ConversionAdjustmentUploadService
 */
class ConversionAdjustmentUploadServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = conversion_adjustment_upload_service_1.ConversionAdjustmentUploadService.typeName;
        this.methods = conversion_adjustment_upload_service_1.ConversionAdjustmentUploadService.methods;
        this.options = conversion_adjustment_upload_service_1.ConversionAdjustmentUploadService.options;
    }
    /**
     * Processes the given conversion adjustments.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [PartialFailureError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: UploadConversionAdjustments(google.ads.googleads.v11.services.UploadConversionAdjustmentsRequest) returns (google.ads.googleads.v11.services.UploadConversionAdjustmentsResponse);
     */
    uploadConversionAdjustments(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ConversionAdjustmentUploadServiceClient = ConversionAdjustmentUploadServiceClient;
//# sourceMappingURL=conversion_adjustment_upload_service.client.js.map