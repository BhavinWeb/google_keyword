"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomAudienceServiceClient = void 0;
const custom_audience_service_1 = require("./custom_audience_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Custom Audience service.
/**
 * Service to manage custom audiences.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomAudienceService
 */
class CustomAudienceServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = custom_audience_service_1.CustomAudienceService.typeName;
        this.methods = custom_audience_service_1.CustomAudienceService.methods;
        this.options = custom_audience_service_1.CustomAudienceService.options;
    }
    /**
     * Creates or updates custom audiences. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CustomAudienceError]()
     *   [CustomInterestError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [OperationAccessDeniedError]()
     *   [PolicyViolationError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomAudiences(google.ads.googleads.v11.services.MutateCustomAudiencesRequest) returns (google.ads.googleads.v11.services.MutateCustomAudiencesResponse);
     */
    mutateCustomAudiences(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.CustomAudienceServiceClient = CustomAudienceServiceClient;
//# sourceMappingURL=custom_audience_service.client.js.map