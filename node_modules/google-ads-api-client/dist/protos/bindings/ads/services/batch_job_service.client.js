"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchJobServiceClient = void 0;
const batch_job_service_1 = require("./batch_job_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the BatchJobService.
/**
 * Service to manage batch jobs.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.BatchJobService
 */
class BatchJobServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = batch_job_service_1.BatchJobService.typeName;
        this.methods = batch_job_service_1.BatchJobService.methods;
        this.options = batch_job_service_1.BatchJobService.options;
    }
    /**
     * Mutates a batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: MutateBatchJob(google.ads.googleads.v11.services.MutateBatchJobRequest) returns (google.ads.googleads.v11.services.MutateBatchJobResponse);
     */
    mutateBatchJob(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the results of the batch job. The job must be done.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListBatchJobResults(google.ads.googleads.v11.services.ListBatchJobResultsRequest) returns (google.ads.googleads.v11.services.ListBatchJobResultsResponse);
     */
    listBatchJobResults(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Runs the batch job.
     *
     * The Operation.metadata field type is BatchJobMetadata. When finished, the
     * long running operation will not contain errors or a response. Instead, use
     * ListBatchJobResults to get the results of the job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: RunBatchJob(google.ads.googleads.v11.services.RunBatchJobRequest) returns (google.longrunning.Operation);
     */
    runBatchJob(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Add operations to the batch job.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [BatchJobError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: AddBatchJobOperations(google.ads.googleads.v11.services.AddBatchJobOperationsRequest) returns (google.ads.googleads.v11.services.AddBatchJobOperationsResponse);
     */
    addBatchJobOperations(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.BatchJobServiceClient = BatchJobServiceClient;
//# sourceMappingURL=batch_job_service.client.js.map