"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeoTargetConstantServiceClient = void 0;
const geo_target_constant_service_1 = require("./geo_target_constant_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Geo target constant service.
/**
 * Service to fetch geo target constants.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.GeoTargetConstantService
 */
class GeoTargetConstantServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = geo_target_constant_service_1.GeoTargetConstantService.typeName;
        this.methods = geo_target_constant_service_1.GeoTargetConstantService.methods;
        this.options = geo_target_constant_service_1.GeoTargetConstantService.options;
    }
    /**
     * Returns GeoTargetConstant suggestions by location name or by resource name.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [GeoTargetConstantSuggestionError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: SuggestGeoTargetConstants(google.ads.googleads.v11.services.SuggestGeoTargetConstantsRequest) returns (google.ads.googleads.v11.services.SuggestGeoTargetConstantsResponse);
     */
    suggestGeoTargetConstants(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.GeoTargetConstantServiceClient = GeoTargetConstantServiceClient;
//# sourceMappingURL=geo_target_constant_service.client.js.map