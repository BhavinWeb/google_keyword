"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReachPlanServiceClient = void 0;
const reach_plan_service_1 = require("./reach_plan_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the reach plan service.
/**
 * Reach Plan Service gives users information about audience size that can
 * be reached through advertisement on YouTube. In particular,
 * GenerateReachForecast provides estimated number of people of specified
 * demographics that can be reached by an ad in a given market by a campaign of
 * certain duration with a defined budget.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.ReachPlanService
 */
class ReachPlanServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = reach_plan_service_1.ReachPlanService.typeName;
        this.methods = reach_plan_service_1.ReachPlanService.methods;
        this.options = reach_plan_service_1.ReachPlanService.options;
    }
    /**
     * Returns the list of plannable locations (for example, countries).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListPlannableLocations(google.ads.googleads.v11.services.ListPlannableLocationsRequest) returns (google.ads.googleads.v11.services.ListPlannableLocationsResponse);
     */
    listPlannableLocations(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of per-location plannable YouTube ad formats with allowed
     * targeting.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListPlannableProducts(google.ads.googleads.v11.services.ListPlannableProductsRequest) returns (google.ads.googleads.v11.services.ListPlannableProductsResponse);
     */
    listPlannableProducts(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Generates a product mix ideas given a set of preferences. This method
     * helps the advertiser to obtain a good mix of ad formats and budget
     * allocations based on its preferences.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [ReachPlanError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateProductMixIdeas(google.ads.googleads.v11.services.GenerateProductMixIdeasRequest) returns (google.ads.googleads.v11.services.GenerateProductMixIdeasResponse);
     */
    generateProductMixIdeas(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Generates a reach forecast for a given targeting / product mix.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RangeError]()
     *   [ReachPlanError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateReachForecast(google.ads.googleads.v11.services.GenerateReachForecastRequest) returns (google.ads.googleads.v11.services.GenerateReachForecastResponse);
     */
    generateReachForecast(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ReachPlanServiceClient = ReachPlanServiceClient;
//# sourceMappingURL=reach_plan_service.client.js.map