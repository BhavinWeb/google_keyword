"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdParameterServiceClient = void 0;
const ad_parameter_service_1 = require("./ad_parameter_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Ad Parameter service.
/**
 * Service to manage ad parameters.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.AdParameterService
 */
class AdParameterServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = ad_parameter_service_1.AdParameterService.typeName;
        this.methods = ad_parameter_service_1.AdParameterService.methods;
        this.options = ad_parameter_service_1.AdParameterService.options;
    }
    /**
     * Creates, updates, or removes ad parameters. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AdParameterError]()
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ContextError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateAdParameters(google.ads.googleads.v11.services.MutateAdParametersRequest) returns (google.ads.googleads.v11.services.MutateAdParametersResponse);
     */
    mutateAdParameters(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.AdParameterServiceClient = AdParameterServiceClient;
//# sourceMappingURL=ad_parameter_service.client.js.map