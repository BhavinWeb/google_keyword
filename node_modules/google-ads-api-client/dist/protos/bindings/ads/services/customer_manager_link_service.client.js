"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerManagerLinkServiceClient = void 0;
const customer_manager_link_service_1 = require("./customer_manager_link_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Service to manage customer-manager links.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomerManagerLinkService
 */
class CustomerManagerLinkServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = customer_manager_link_service_1.CustomerManagerLinkService.typeName;
        this.methods = customer_manager_link_service_1.CustomerManagerLinkService.methods;
        this.options = customer_manager_link_service_1.CustomerManagerLinkService.options;
    }
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomerManagerLink(google.ads.googleads.v11.services.MutateCustomerManagerLinkRequest) returns (google.ads.googleads.v11.services.MutateCustomerManagerLinkResponse);
     */
    mutateCustomerManagerLink(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MoveManagerLink(google.ads.googleads.v11.services.MoveManagerLinkRequest) returns (google.ads.googleads.v11.services.MoveManagerLinkResponse);
     */
    moveManagerLink(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.CustomerManagerLinkServiceClient = CustomerManagerLinkServiceClient;
//# sourceMappingURL=customer_manager_link_service.client.js.map