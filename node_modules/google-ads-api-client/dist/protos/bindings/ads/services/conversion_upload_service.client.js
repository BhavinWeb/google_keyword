"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionUploadServiceClient = void 0;
const conversion_upload_service_1 = require("./conversion_upload_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
/**
 * Service to upload conversions.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.ConversionUploadService
 */
class ConversionUploadServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = conversion_upload_service_1.ConversionUploadService.typeName;
        this.methods = conversion_upload_service_1.ConversionUploadService.methods;
        this.options = conversion_upload_service_1.ConversionUploadService.options;
    }
    /**
     * Processes the given click conversions.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ConversionUploadError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [PartialFailureError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: UploadClickConversions(google.ads.googleads.v11.services.UploadClickConversionsRequest) returns (google.ads.googleads.v11.services.UploadClickConversionsResponse);
     */
    uploadClickConversions(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Processes the given call conversions.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [PartialFailureError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: UploadCallConversions(google.ads.googleads.v11.services.UploadCallConversionsRequest) returns (google.ads.googleads.v11.services.UploadCallConversionsResponse);
     */
    uploadCallConversions(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ConversionUploadServiceClient = ConversionUploadServiceClient;
//# sourceMappingURL=conversion_upload_service.client.js.map