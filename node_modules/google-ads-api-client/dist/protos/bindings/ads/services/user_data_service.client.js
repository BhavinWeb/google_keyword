"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDataServiceClient = void 0;
const user_data_service_1 = require("./user_data_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the UserDataService.
/**
 * Service to manage user data uploads.
 * Any uploads made to a Customer Match list through this service will be
 * eligible for matching as per the customer matching process. See
 * https://support.google.com/google-ads/answer/7474263. However, the uploads
 * made through this service will not be visible under the 'Segment members'
 * section for the Customer Match List in the Google Ads UI.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.UserDataService
 */
class UserDataServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = user_data_service_1.UserDataService.typeName;
        this.methods = user_data_service_1.UserDataService.methods;
        this.options = user_data_service_1.UserDataService.options;
    }
    /**
     * Uploads the given user data.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CollectionSizeError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [OfflineUserDataJobError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [UserDataError]()
     *
     * @generated from protobuf rpc: UploadUserData(google.ads.googleads.v11.services.UploadUserDataRequest) returns (google.ads.googleads.v11.services.UploadUserDataResponse);
     */
    uploadUserData(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.UserDataServiceClient = UserDataServiceClient;
//# sourceMappingURL=user_data_service.client.js.map