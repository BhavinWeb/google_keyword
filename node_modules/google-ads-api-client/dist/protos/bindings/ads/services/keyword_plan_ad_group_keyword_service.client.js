"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordPlanAdGroupKeywordServiceClient = void 0;
const keyword_plan_ad_group_keyword_service_1 = require("./keyword_plan_ad_group_keyword_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the keyword plan ad group keyword service.
/**
 * Service to manage Keyword Plan ad group keywords. KeywordPlanAdGroup is
 * required to add ad group keywords. Positive and negative keywords are
 * supported. A maximum of 10,000 positive keywords are allowed per keyword
 * plan. A maximum of 1,000 negative keywords are allower per keyword plan. This
 * includes campaign negative keywords and ad group negative keywords.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.KeywordPlanAdGroupKeywordService
 */
class KeywordPlanAdGroupKeywordServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = keyword_plan_ad_group_keyword_service_1.KeywordPlanAdGroupKeywordService.typeName;
        this.methods = keyword_plan_ad_group_keyword_service_1.KeywordPlanAdGroupKeywordService.methods;
        this.options = keyword_plan_ad_group_keyword_service_1.KeywordPlanAdGroupKeywordService.options;
    }
    /**
     * Creates, updates, or removes Keyword Plan ad group keywords. Operation
     * statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanAdGroupKeywordError]()
     *   [KeywordPlanError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: MutateKeywordPlanAdGroupKeywords(google.ads.googleads.v11.services.MutateKeywordPlanAdGroupKeywordsRequest) returns (google.ads.googleads.v11.services.MutateKeywordPlanAdGroupKeywordsResponse);
     */
    mutateKeywordPlanAdGroupKeywords(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.KeywordPlanAdGroupKeywordServiceClient = KeywordPlanAdGroupKeywordServiceClient;
//# sourceMappingURL=keyword_plan_ad_group_keyword_service.client.js.map