"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordPlanServiceClient = void 0;
const keyword_plan_service_1 = require("./keyword_plan_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the keyword plan service.
/**
 * Service to manage keyword plans.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.KeywordPlanService
 */
class KeywordPlanServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = keyword_plan_service_1.KeywordPlanService.typeName;
        this.methods = keyword_plan_service_1.KeywordPlanService.methods;
        this.options = keyword_plan_service_1.KeywordPlanService.options;
    }
    /**
     * Creates, updates, or removes keyword plans. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanError]()
     *   [MutateError]()
     *   [NewResourceCreationError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *   [StringLengthError]()
     *
     * @generated from protobuf rpc: MutateKeywordPlans(google.ads.googleads.v11.services.MutateKeywordPlansRequest) returns (google.ads.googleads.v11.services.MutateKeywordPlansResponse);
     */
    mutateKeywordPlans(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the requested Keyword Plan forecast curve.
     * Only the bidding strategy is considered for generating forecast curve.
     * The bidding strategy value specified in the plan is ignored.
     *
     * To generate a forecast at a value specified in the plan, use
     * KeywordPlanService.GenerateForecastMetrics.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateForecastCurve(google.ads.googleads.v11.services.GenerateForecastCurveRequest) returns (google.ads.googleads.v11.services.GenerateForecastCurveResponse);
     */
    generateForecastCurve(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a forecast in the form of a time series for the Keyword Plan over
     * the next 52 weeks.
     * (1) Forecasts closer to the current date are generally more accurate than
     * further out.
     *
     * (2) The forecast reflects seasonal trends using current and
     * prior traffic patterns. The forecast period of the plan is ignored.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateForecastTimeSeries(google.ads.googleads.v11.services.GenerateForecastTimeSeriesRequest) returns (google.ads.googleads.v11.services.GenerateForecastTimeSeriesResponse);
     */
    generateForecastTimeSeries(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the requested Keyword Plan forecasts.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateForecastMetrics(google.ads.googleads.v11.services.GenerateForecastMetricsRequest) returns (google.ads.googleads.v11.services.GenerateForecastMetricsResponse);
     */
    generateForecastMetrics(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the requested Keyword Plan historical metrics.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: GenerateHistoricalMetrics(google.ads.googleads.v11.services.GenerateHistoricalMetricsRequest) returns (google.ads.googleads.v11.services.GenerateHistoricalMetricsResponse);
     */
    generateHistoricalMetrics(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.KeywordPlanServiceClient = KeywordPlanServiceClient;
//# sourceMappingURL=keyword_plan_service.client.js.map