import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { ListCampaignDraftAsyncErrorsResponse } from "./campaign_draft_service";
import type { ListCampaignDraftAsyncErrorsRequest } from "./campaign_draft_service";
import type { Operation } from "../../google/longrunning/operations";
import type { PromoteCampaignDraftRequest } from "./campaign_draft_service";
import type { MutateCampaignDraftsResponse } from "./campaign_draft_service";
import type { MutateCampaignDraftsRequest } from "./campaign_draft_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service to manage campaign drafts.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CampaignDraftService
 */
export interface ICampaignDraftServiceClient {
    /**
     * Creates, updates, or removes campaign drafts. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCampaignDrafts(google.ads.googleads.v11.services.MutateCampaignDraftsRequest) returns (google.ads.googleads.v11.services.MutateCampaignDraftsResponse);
     */
    mutateCampaignDrafts(input: MutateCampaignDraftsRequest, options?: RpcOptions): UnaryCall<MutateCampaignDraftsRequest, MutateCampaignDraftsResponse>;
    /**
     * Promotes the changes in a draft back to the base campaign.
     *
     * This method returns a Long Running Operation (LRO) indicating if the
     * Promote is done. Use [Operations.GetOperation] to poll the LRO until it
     * is done. Only a done status is returned in the response. See the status
     * in the Campaign Draft resource to determine if the promotion was
     * successful. If the LRO failed, use
     * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v11.services.CampaignDraftService.ListCampaignDraftAsyncErrors] to view the list of
     * error reasons.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: PromoteCampaignDraft(google.ads.googleads.v11.services.PromoteCampaignDraftRequest) returns (google.longrunning.Operation);
     */
    promoteCampaignDraft(input: PromoteCampaignDraftRequest, options?: RpcOptions): UnaryCall<PromoteCampaignDraftRequest, Operation>;
    /**
     * Returns all errors that occurred during CampaignDraft promote. Throws an
     * error if called before campaign draft is promoted.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListCampaignDraftAsyncErrors(google.ads.googleads.v11.services.ListCampaignDraftAsyncErrorsRequest) returns (google.ads.googleads.v11.services.ListCampaignDraftAsyncErrorsResponse);
     */
    listCampaignDraftAsyncErrors(input: ListCampaignDraftAsyncErrorsRequest, options?: RpcOptions): UnaryCall<ListCampaignDraftAsyncErrorsRequest, ListCampaignDraftAsyncErrorsResponse>;
}
/**
 * Service to manage campaign drafts.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CampaignDraftService
 */
export declare class CampaignDraftServiceClient implements ICampaignDraftServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * Creates, updates, or removes campaign drafts. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCampaignDrafts(google.ads.googleads.v11.services.MutateCampaignDraftsRequest) returns (google.ads.googleads.v11.services.MutateCampaignDraftsResponse);
     */
    mutateCampaignDrafts(input: MutateCampaignDraftsRequest, options?: RpcOptions): UnaryCall<MutateCampaignDraftsRequest, MutateCampaignDraftsResponse>;
    /**
     * Promotes the changes in a draft back to the base campaign.
     *
     * This method returns a Long Running Operation (LRO) indicating if the
     * Promote is done. Use [Operations.GetOperation] to poll the LRO until it
     * is done. Only a done status is returned in the response. See the status
     * in the Campaign Draft resource to determine if the promotion was
     * successful. If the LRO failed, use
     * [CampaignDraftService.ListCampaignDraftAsyncErrors][google.ads.googleads.v11.services.CampaignDraftService.ListCampaignDraftAsyncErrors] to view the list of
     * error reasons.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [CampaignDraftError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: PromoteCampaignDraft(google.ads.googleads.v11.services.PromoteCampaignDraftRequest) returns (google.longrunning.Operation);
     */
    promoteCampaignDraft(input: PromoteCampaignDraftRequest, options?: RpcOptions): UnaryCall<PromoteCampaignDraftRequest, Operation>;
    /**
     * Returns all errors that occurred during CampaignDraft promote. Throws an
     * error if called before campaign draft is promoted.
     * Supports standard list paging.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: ListCampaignDraftAsyncErrors(google.ads.googleads.v11.services.ListCampaignDraftAsyncErrorsRequest) returns (google.ads.googleads.v11.services.ListCampaignDraftAsyncErrorsResponse);
     */
    listCampaignDraftAsyncErrors(input: ListCampaignDraftAsyncErrorsRequest, options?: RpcOptions): UnaryCall<ListCampaignDraftAsyncErrorsRequest, ListCampaignDraftAsyncErrorsResponse>;
}
