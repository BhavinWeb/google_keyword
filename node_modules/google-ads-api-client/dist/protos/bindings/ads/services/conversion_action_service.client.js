"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionActionServiceClient = void 0;
const conversion_action_service_1 = require("./conversion_action_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Conversion Action service.
/**
 * Service to manage conversion actions.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.ConversionActionService
 */
class ConversionActionServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = conversion_action_service_1.ConversionActionService.typeName;
        this.methods = conversion_action_service_1.ConversionActionService.methods;
        this.options = conversion_action_service_1.ConversionActionService.options;
    }
    /**
     * Creates, updates or removes conversion actions. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ConversionActionError]()
     *   [CurrencyCodeError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [NewResourceCreationError]()
     *   [QuotaError]()
     *   [RangeError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *   [StringLengthError]()
     *
     * @generated from protobuf rpc: MutateConversionActions(google.ads.googleads.v11.services.MutateConversionActionsRequest) returns (google.ads.googleads.v11.services.MutateConversionActionsResponse);
     */
    mutateConversionActions(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ConversionActionServiceClient = ConversionActionServiceClient;
//# sourceMappingURL=conversion_action_service.client.js.map