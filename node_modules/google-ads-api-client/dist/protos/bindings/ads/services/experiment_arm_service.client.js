"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentArmServiceClient = void 0;
const experiment_arm_service_1 = require("./experiment_arm_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the Experiment Arm service.
/**
 * Service to manage experiment arms.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.ExperimentArmService
 */
class ExperimentArmServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = experiment_arm_service_1.ExperimentArmService.typeName;
        this.methods = experiment_arm_service_1.ExperimentArmService.methods;
        this.options = experiment_arm_service_1.ExperimentArmService.options;
    }
    /**
     * Creates, updates, or removes experiment arms. Operation statuses are
     * returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [ExperimentArmError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateExperimentArms(google.ads.googleads.v11.services.MutateExperimentArmsRequest) returns (google.ads.googleads.v11.services.MutateExperimentArmsResponse);
     */
    mutateExperimentArms(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.ExperimentArmServiceClient = ExperimentArmServiceClient;
//# sourceMappingURL=experiment_arm_service.client.js.map