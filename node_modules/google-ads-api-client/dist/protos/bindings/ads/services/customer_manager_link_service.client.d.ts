import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { MoveManagerLinkResponse } from "./customer_manager_link_service";
import type { MoveManagerLinkRequest } from "./customer_manager_link_service";
import type { MutateCustomerManagerLinkResponse } from "./customer_manager_link_service";
import type { MutateCustomerManagerLinkRequest } from "./customer_manager_link_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service to manage customer-manager links.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomerManagerLinkService
 */
export interface ICustomerManagerLinkServiceClient {
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomerManagerLink(google.ads.googleads.v11.services.MutateCustomerManagerLinkRequest) returns (google.ads.googleads.v11.services.MutateCustomerManagerLinkResponse);
     */
    mutateCustomerManagerLink(input: MutateCustomerManagerLinkRequest, options?: RpcOptions): UnaryCall<MutateCustomerManagerLinkRequest, MutateCustomerManagerLinkResponse>;
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MoveManagerLink(google.ads.googleads.v11.services.MoveManagerLinkRequest) returns (google.ads.googleads.v11.services.MoveManagerLinkResponse);
     */
    moveManagerLink(input: MoveManagerLinkRequest, options?: RpcOptions): UnaryCall<MoveManagerLinkRequest, MoveManagerLinkResponse>;
}
/**
 * Service to manage customer-manager links.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.CustomerManagerLinkService
 */
export declare class CustomerManagerLinkServiceClient implements ICustomerManagerLinkServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: string;
    methods: import("@protobuf-ts/runtime-rpc").MethodInfo<any, any>[];
    options: {
        [extensionName: string]: import("@protobuf-ts/runtime").JsonValue;
    };
    constructor(_transport: RpcTransport);
    /**
     * Updates customer manager links. Operation statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [FieldMaskError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [ManagerLinkError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MutateCustomerManagerLink(google.ads.googleads.v11.services.MutateCustomerManagerLinkRequest) returns (google.ads.googleads.v11.services.MutateCustomerManagerLinkResponse);
     */
    mutateCustomerManagerLink(input: MutateCustomerManagerLinkRequest, options?: RpcOptions): UnaryCall<MutateCustomerManagerLinkRequest, MutateCustomerManagerLinkResponse>;
    /**
     * Moves a client customer to a new manager customer.
     * This simplifies the complex request that requires two operations to move
     * a client customer to a new manager, for example:
     * 1. Update operation with Status INACTIVE (previous manager) and,
     * 2. Update operation with Status ACTIVE (new manager).
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [MutateError]()
     *   [QuotaError]()
     *   [RequestError]()
     *
     * @generated from protobuf rpc: MoveManagerLink(google.ads.googleads.v11.services.MoveManagerLinkRequest) returns (google.ads.googleads.v11.services.MoveManagerLinkResponse);
     */
    moveManagerLink(input: MoveManagerLinkRequest, options?: RpcOptions): UnaryCall<MoveManagerLinkRequest, MoveManagerLinkResponse>;
}
