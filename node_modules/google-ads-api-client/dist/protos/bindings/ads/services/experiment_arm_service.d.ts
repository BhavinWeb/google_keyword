import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../google/rpc/status";
import { ExperimentArm } from "../resources/experiment_arm";
import { FieldMask } from "../../google/protobuf/field_mask";
import { ResponseContentTypeEnum_ResponseContentType } from "../enums/response_content_type";
/**
 * Request message for [ExperimentArmService.MutateExperimentArms][google.ads.googleads.v11.services.ExperimentArmService.MutateExperimentArms].
 *
 * @generated from protobuf message google.ads.googleads.v11.services.MutateExperimentArmsRequest
 */
export interface MutateExperimentArmsRequest {
    /**
     * Required. The ID of the customer whose experiments are being modified.
     *
     * @generated from protobuf field: string customer_id = 1;
     */
    customerId: string;
    /**
     * Required. The list of operations to perform on individual experiment arm.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.ExperimentArmOperation operations = 2;
     */
    operations: ExperimentArmOperation[];
    /**
     * If true, successful operations will be carried out and invalid
     * operations will return errors. If false, all operations will be carried
     * out in one transaction if and only if they are all valid.
     * Default is false.
     *
     * @generated from protobuf field: bool partial_failure = 3;
     */
    partialFailure: boolean;
    /**
     * If true, the request is validated but not executed. Only errors are
     * returned, not results.
     *
     * @generated from protobuf field: bool validate_only = 4;
     */
    validateOnly: boolean;
    /**
     * The response content type setting. Determines whether the mutable resource
     * or just the resource name should be returned post mutation.
     *
     * @generated from protobuf field: google.ads.googleads.v11.enums.ResponseContentTypeEnum.ResponseContentType response_content_type = 5;
     */
    responseContentType: ResponseContentTypeEnum_ResponseContentType;
}
/**
 * A single operation on an experiment arm.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.ExperimentArmOperation
 */
export interface ExperimentArmOperation {
    /**
     * FieldMask that determines which resource fields are modified in an update.
     *
     * @generated from protobuf field: google.protobuf.FieldMask update_mask = 4;
     */
    updateMask?: FieldMask;
    /**
     * @generated from protobuf oneof: operation
     */
    operation: {
        oneofKind: "create";
        /**
         * Create operation
         *
         * @generated from protobuf field: google.ads.googleads.v11.resources.ExperimentArm create = 1;
         */
        create: ExperimentArm;
    } | {
        oneofKind: "update";
        /**
         * Update operation: The experiment arm is expected to have a valid
         * resource name.
         *
         * @generated from protobuf field: google.ads.googleads.v11.resources.ExperimentArm update = 2;
         */
        update: ExperimentArm;
    } | {
        oneofKind: "remove";
        /**
         * Remove operation: The experiment arm is expected to have a valid
         * resource name, in this format:
         *
         * `customers/{customer_id}/experiments/{campaign_experiment_id}`
         *
         * @generated from protobuf field: string remove = 3;
         */
        remove: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Response message for experiment arm mutate.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.MutateExperimentArmsResponse
 */
export interface MutateExperimentArmsResponse {
    /**
     * Errors that pertain to operation failures in the partial failure mode.
     * Returned only when partial_failure = true and all errors occur inside the
     * operations. If any errors occur outside the operations (for example, auth
     * errors), we return an RPC level error.
     *
     * @generated from protobuf field: google.rpc.Status partial_failure_error = 1;
     */
    partialFailureError?: Status;
    /**
     * All results for the mutate.
     *
     * @generated from protobuf field: repeated google.ads.googleads.v11.services.MutateExperimentArmResult results = 2;
     */
    results: MutateExperimentArmResult[];
}
/**
 * The result for the experiment arm mutate.
 *
 * @generated from protobuf message google.ads.googleads.v11.services.MutateExperimentArmResult
 */
export interface MutateExperimentArmResult {
    /**
     * Returned for successful operations.
     *
     * @generated from protobuf field: string resource_name = 1;
     */
    resourceName: string;
    /**
     * The mutated experiment arm with only mutable fields after mutate. The
     * field will only be returned when response_content_type is set to
     * "MUTABLE_RESOURCE".
     *
     * @generated from protobuf field: google.ads.googleads.v11.resources.ExperimentArm experiment_arm = 2;
     */
    experimentArm?: ExperimentArm;
}
declare class MutateExperimentArmsRequest$Type extends MessageType<MutateExperimentArmsRequest> {
    constructor();
    create(value?: PartialMessage<MutateExperimentArmsRequest>): MutateExperimentArmsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutateExperimentArmsRequest): MutateExperimentArmsRequest;
    internalBinaryWrite(message: MutateExperimentArmsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.MutateExperimentArmsRequest
 */
export declare const MutateExperimentArmsRequest: MutateExperimentArmsRequest$Type;
declare class ExperimentArmOperation$Type extends MessageType<ExperimentArmOperation> {
    constructor();
    create(value?: PartialMessage<ExperimentArmOperation>): ExperimentArmOperation;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExperimentArmOperation): ExperimentArmOperation;
    internalBinaryWrite(message: ExperimentArmOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.ExperimentArmOperation
 */
export declare const ExperimentArmOperation: ExperimentArmOperation$Type;
declare class MutateExperimentArmsResponse$Type extends MessageType<MutateExperimentArmsResponse> {
    constructor();
    create(value?: PartialMessage<MutateExperimentArmsResponse>): MutateExperimentArmsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutateExperimentArmsResponse): MutateExperimentArmsResponse;
    internalBinaryWrite(message: MutateExperimentArmsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.MutateExperimentArmsResponse
 */
export declare const MutateExperimentArmsResponse: MutateExperimentArmsResponse$Type;
declare class MutateExperimentArmResult$Type extends MessageType<MutateExperimentArmResult> {
    constructor();
    create(value?: PartialMessage<MutateExperimentArmResult>): MutateExperimentArmResult;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MutateExperimentArmResult): MutateExperimentArmResult;
    internalBinaryWrite(message: MutateExperimentArmResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.services.MutateExperimentArmResult
 */
export declare const MutateExperimentArmResult: MutateExperimentArmResult$Type;
/**
 * @generated ServiceType for protobuf service google.ads.googleads.v11.services.ExperimentArmService
 */
export declare const ExperimentArmService: ServiceType;
export {};
