"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordPlanCampaignKeywordServiceClient = void 0;
const keyword_plan_campaign_keyword_service_1 = require("./keyword_plan_campaign_keyword_service");
const runtime_rpc_1 = require("@protobuf-ts/runtime-rpc");
// Proto file describing the keyword plan campaign keyword service.
/**
 * Service to manage Keyword Plan campaign keywords. KeywordPlanCampaign is
 * required to add the campaign keywords. Only negative keywords are supported.
 * A maximum of 1000 negative keywords are allowed per plan. This includes both
 * campaign negative keywords and ad group negative keywords.
 *
 * @generated from protobuf service google.ads.googleads.v11.services.KeywordPlanCampaignKeywordService
 */
class KeywordPlanCampaignKeywordServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = keyword_plan_campaign_keyword_service_1.KeywordPlanCampaignKeywordService.typeName;
        this.methods = keyword_plan_campaign_keyword_service_1.KeywordPlanCampaignKeywordService.methods;
        this.options = keyword_plan_campaign_keyword_service_1.KeywordPlanCampaignKeywordService.options;
    }
    /**
     * Creates, updates, or removes Keyword Plan campaign keywords. Operation
     * statuses are returned.
     *
     * List of thrown errors:
     *   [AuthenticationError]()
     *   [AuthorizationError]()
     *   [DatabaseError]()
     *   [FieldError]()
     *   [HeaderError]()
     *   [InternalError]()
     *   [KeywordPlanAdGroupKeywordError]()
     *   [KeywordPlanCampaignKeywordError]()
     *   [QuotaError]()
     *   [RequestError]()
     *   [ResourceCountLimitExceededError]()
     *
     * @generated from protobuf rpc: MutateKeywordPlanCampaignKeywords(google.ads.googleads.v11.services.MutateKeywordPlanCampaignKeywordsRequest) returns (google.ads.googleads.v11.services.MutateKeywordPlanCampaignKeywordsResponse);
     */
    mutateKeywordPlanCampaignKeywords(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return (0, runtime_rpc_1.stackIntercept)("unary", this._transport, method, opt, input);
    }
}
exports.KeywordPlanCampaignKeywordServiceClient = KeywordPlanCampaignKeywordServiceClient;
//# sourceMappingURL=keyword_plan_campaign_keyword_service.client.js.map