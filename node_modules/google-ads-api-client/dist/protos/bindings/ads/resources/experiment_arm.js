"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentArm = void 0;
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
// @generated message type with reflection information, may provide speed optimized methods
class ExperimentArm$Type extends runtime_5.MessageType {
    constructor() {
        super("google.ads.googleads.v11.resources.ExperimentArm", [
            { no: 1, name: "resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/ExperimentArm" } } },
            { no: 2, name: "trial", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["IMMUTABLE"], "google.api.resource_reference": { type: "googleads.googleapis.com/Experiment" } } },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["REQUIRED"] } },
            { no: 4, name: "control", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "traffic_split", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "campaigns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.resource_reference": { type: "googleads.googleapis.com/Campaign" } } },
            { no: 7, name: "in_design_campaigns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "google.api.field_behavior": ["OUTPUT_ONLY"], "google.api.resource_reference": { type: "googleads.googleapis.com/Campaign" } } }
        ], { "google.api.resource": { type: "googleads.googleapis.com/ExperimentArm", pattern: ["customers/{customer_id}/experimentArms/{trial_id}~{trial_arm_id}"] } });
    }
    create(value) {
        const message = { resourceName: "", trial: "", name: "", control: false, trafficSplit: 0n, campaigns: [], inDesignCampaigns: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string resource_name */ 1:
                    message.resourceName = reader.string();
                    break;
                case /* string trial */ 2:
                    message.trial = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* bool control */ 4:
                    message.control = reader.bool();
                    break;
                case /* int64 traffic_split */ 5:
                    message.trafficSplit = reader.int64().toBigInt();
                    break;
                case /* repeated string campaigns */ 6:
                    message.campaigns.push(reader.string());
                    break;
                case /* repeated string in_design_campaigns */ 7:
                    message.inDesignCampaigns.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string resource_name = 1; */
        if (message.resourceName !== "")
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.resourceName);
        /* string trial = 2; */
        if (message.trial !== "")
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.trial);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.name);
        /* bool control = 4; */
        if (message.control !== false)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.control);
        /* int64 traffic_split = 5; */
        if (message.trafficSplit !== 0n)
            writer.tag(5, runtime_1.WireType.Varint).int64(message.trafficSplit);
        /* repeated string campaigns = 6; */
        for (let i = 0; i < message.campaigns.length; i++)
            writer.tag(6, runtime_1.WireType.LengthDelimited).string(message.campaigns[i]);
        /* repeated string in_design_campaigns = 7; */
        for (let i = 0; i < message.inDesignCampaigns.length; i++)
            writer.tag(7, runtime_1.WireType.LengthDelimited).string(message.inDesignCampaigns[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.ads.googleads.v11.resources.ExperimentArm
 */
exports.ExperimentArm = new ExperimentArm$Type();
//# sourceMappingURL=experiment_arm.js.map